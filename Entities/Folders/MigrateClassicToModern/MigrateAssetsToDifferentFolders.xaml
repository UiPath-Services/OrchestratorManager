<Activity mc:Ignorable="sap sap2010" x:Class="MigrateAssetsToDifferentFolders" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_ClassicFolderAssetsData" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_FoldersData" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, ui:GenericValue))" />
    <x:Property Name="in_FolderMigrationWorkbook" Type="InArgument(ui:WorkbookApplication)" />
    <x:Property Name="io_MigrationExceptionsOccurred" Type="InOutArgument(x:Boolean)" />
    <x:Property Name="in_ClassicFolderRobotsData" Type="InArgument(sd:DataTable)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1348.66666666667,3147.33333333333</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>MigrateAssetsToDifferentFolders_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="28">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="21">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Migrate Assets to the specified Modern Folders.&#xA;&#xA;Indexes are used instead of column names due to localization of the Excel sheet:&#xA;- AssetMigrationDetails(0) refers to Classic Folder name&#xA;- AssetMigrationDetails(1) refers to Asset name&#xA;- AssetMigrationDetails(2) refers to Asset scope&#xA;- AssetMigrationDetails(3) refers to Robot's name (in case of Asset per Robot)&#xA;- AssetMigrationDetails(4) refers to Asset type&#xA;- AssetMigrationDetails(5) refers to Modern Folder name&#xA;- AssetMigrationDetails(6) refers to Result" DisplayName="Migrate Assets to Different Folders" sap:VirtualizedContainerService.HintSize="700,3082.66666666667" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataTable" Name="AssetsMigrationDetails" />
      <Variable x:TypeArguments="sd:DataRow[]" Name="UnprocessedAssetDetails" />
      <Variable x:TypeArguments="sd:DataTable" Name="UsersData" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:ExcelApplicationScope Password="{x:Null}" WorkbookPath="{x:Null}" CreateNewFile="False" DisplayName="Excel Application Scope (Migrate Assets)" ExistingWorkbook="[in_FolderMigrationWorkbook]" sap:VirtualizedContainerService.HintSize="658,167.333333333333" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_1" Visible="False">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <ui:ExcelReadRange AddHeaders="True" DataTable="[AssetsMigrationDetails]" DisplayName="Read Range (Migrate Assets Details)" sap:VirtualizedContainerService.HintSize="334,58.6666666666667" sap2010:WorkflowViewState.IdRef="ExcelReadRange_1" SheetName="[in_Config(&quot;Assets&quot;)]" UseFilter="True">
            <ui:ExcelReadRange.Range>
              <InArgument x:TypeArguments="x:String">
                <Literal x:TypeArguments="x:String" Value="" />
              </InArgument>
            </ui:ExcelReadRange.Range>
          </ui:ExcelReadRange>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ExcelApplicationScope>
    <Assign sap2010:Annotation.AnnotationText="Select only rows that do not have a value in the Result column and that specify a value for the Modern Folder Name column." DisplayName="Assign UnprocessedAssetDetails" sap:VirtualizedContainerService.HintSize="658,140.666666666667" sap2010:WorkflowViewState.IdRef="Assign_7">
      <Assign.To>
        <OutArgument x:TypeArguments="sd:DataRow[]">[UnprocessedAssetDetails]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="sd:DataRow[]">[AssetsMigrationDetails.AsEnumerable().Where(Function(Row) String.IsNullOrWhiteSpace(Row(6).ToString) AndAlso Not String.IsNullOrWhiteSpace(Row(5).ToString)).ToArray()]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <ui:ForEach x:TypeArguments="sd:DataRow" CurrentIndex="{x:Null}" DisplayName="For Each Global Asset" sap:VirtualizedContainerService.HintSize="658,1639.33333333333" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[UnprocessedAssetDetails.Where(Function(Row) Row(2).ToString.ToLowerInvariant = &quot;global&quot;)]">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="sd:DataRow">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="sd:DataRow" Name="AssetMigrationDetails" />
          </ActivityAction.Argument>
          <TryCatch sap2010:Annotation.AnnotationText="Prevent the creation of different global Assets to interfer with each other." DisplayName="Try Catch (Migrate Global Asset to Modern Folder)" sap:VirtualizedContainerService.HintSize="621.333333333333,1500.66666666667" sap2010:WorkflowViewState.IdRef="TryCatch_2">
            <TryCatch.Variables>
              <Variable x:TypeArguments="x:String" Default="[in_Config(&quot;OperationDefaultResult&quot;)]" Name="OperationResult" />
            </TryCatch.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <TryCatch.Try>
              <Sequence DisplayName="Try to Create Global Asset in Modern Folder" sap:VirtualizedContainerService.HintSize="582.666666666667,1232" sap2010:WorkflowViewState.IdRef="Sequence_2">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:Int64" Name="ModernFolderID" />
                  <Variable x:TypeArguments="x:Int64" Name="ClassicFolderID" />
                  <Variable x:TypeArguments="sd:DataRow" Name="ClassicFolderAsset" />
                  <Variable x:TypeArguments="x:String" Name="Password" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Sequence DisplayName="Validate Folders" sap:VirtualizedContainerService.HintSize="540.666666666667,69.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_5">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If Condition="[in_FoldersData.Rows.Find({AssetMigrationDetails(0).ToString}) Is Nothing]" DisplayName="If Specified Classic Folder Exists" sap:VirtualizedContainerService.HintSize="508,216" sap2010:WorkflowViewState.IdRef="If_2">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <Throw DisplayName="Throw (Classic Folder Not Found)" Exception="[New ArgumentException(String.Format(in_Config(&quot;NamedFolderNotFound&quot;), AssetMigrationDetails(0).ToString))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_2" />
                    </If.Then>
                    <If.Else>
                      <Assign DisplayName="Assign ClassicFolderID" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_3">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int64">[ClassicFolderID]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int64">[Convert.ToInt64(in_FoldersData.Rows.Find({AssetMigrationDetails(0).ToString})("ID"))]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                  <If Condition="[in_FoldersData.Rows.Find({AssetMigrationDetails(5).ToString}) Is Nothing]" DisplayName="If Specified Modern Folder Exists" sap:VirtualizedContainerService.HintSize="508,216" sap2010:WorkflowViewState.IdRef="If_3">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <Throw DisplayName="Throw (Modern Folder Not Found)" Exception="[New ArgumentException(String.Format(in_Config(&quot;NamedFolderNotFound&quot;), AssetMigrationDetails(5).ToString))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_3" />
                    </If.Then>
                    <If.Else>
                      <Assign DisplayName="Assign ModernFolderID" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_2">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int64">[ModernFolderID]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int64">[Convert.ToInt64(in_FoldersData.Rows.Find({AssetMigrationDetails(5)})("ID"))]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                </Sequence>
                <If Condition="[in_ClassicFolderAssetsData.AsEnumerable().Where(Function(Row) Convert.ToInt64(Row(&quot;OUID&quot;)) = ClassicFolderID AndAlso Row(&quot;AssetName&quot;).ToString = AssetMigrationDetails(1).ToString).Count() = 0]" DisplayName="If Global Asset Exists in Classic Folder" sap:VirtualizedContainerService.HintSize="540.666666666667,294.666666666667" sap2010:WorkflowViewState.IdRef="If_4">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If.Then>
                    <Throw DisplayName="Throw (Asset Not Found)" Exception="[New ArgumentException(in_Config(&quot;AssetNotFound&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_4" />
                  </If.Then>
                  <If.Else>
                    <Assign sap2010:Annotation.AnnotationText="Get original Asset from Classic Folder to use its data when making the request to create a new one in the target Modern Folder." DisplayName="Assign ClassicFolderAsset" sap:VirtualizedContainerService.HintSize="262,140.666666666667" sap2010:WorkflowViewState.IdRef="Assign_1">
                      <Assign.To>
                        <OutArgument x:TypeArguments="sd:DataRow">[ClassicFolderAsset]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="sd:DataRow">[in_ClassicFolderAssetsData.AsEnumerable().Where(Function(Row) Convert.ToInt64(Row("OUID")) = ClassicFolderID AndAlso Row("AssetName").ToString = AssetMigrationDetails(1).ToString).First()]</InArgument>
                      </Assign.Value>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </Assign>
                  </If.Else>
                </If>
                <If Condition="[ClassicFolderAsset(&quot;Type&quot;).ToString.ToLowerInvariant = &quot;credential&quot;]" DisplayName="If Credential Asset" sap:VirtualizedContainerService.HintSize="540.666666666667,434.666666666667" sap2010:WorkflowViewState.IdRef="If_5">
                  <If.Then>
                    <Sequence DisplayName="Check for Empty Password" sap:VirtualizedContainerService.HintSize="394.666666666667,280.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_13">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign DisplayName="Assign Password" sap:VirtualizedContainerService.HintSize="352.666666666667,62" sap2010:WorkflowViewState.IdRef="Assign_13">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[Password]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">[ClassicFolderAsset("Password").ToString]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke VerifyCredentialAssetPassword Workflow" sap:VirtualizedContainerService.HintSize="352.666666666667,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_7" UnSafe="False" WorkflowFileName="Entities/Assets/VerifyCredentialAssetPassword.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                          <InOutArgument x:TypeArguments="x:String" x:Key="io_Password">[Password]</InOutArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                    </Sequence>
                  </If.Then>
                </If>
                <ui:LogMessage DisplayName="Log Message (Migrate Global Asset)" sap:VirtualizedContainerService.HintSize="540.666666666667,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Trace" Message="[String.Format(in_Config(&quot;MigrateAsset&quot;), ClassicFolderAsset(&quot;AssetName&quot;).ToString)]" />
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke CreateAssetRequest Workflow (Global Asset)" sap:VirtualizedContainerService.HintSize="540.666666666667,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Entities\Assets\CreateAssetRequest.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="x:Int64" x:Key="in_OUFolderID">
                      <mva:VisualBasicValue x:TypeArguments="x:Int64" ExpressionText="ModernFolderID" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_AssetName">
                      <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="ClassicFolderAsset(&quot;AssetName&quot;).ToString" />
                    </InArgument>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">
                      <mva:VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" ExpressionText="in_Config" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_AssetType">
                      <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="ClassicFolderAsset(&quot;Type&quot;).ToString" />
                    </InArgument>
                    <OutArgument x:TypeArguments="x:Int64" x:Key="out_AssetID" />
                    <InArgument x:TypeArguments="scg:List(scg:Dictionary(x:String, x:Object))" x:Key="in_RobotUsersValues" />
                    <InArgument x:TypeArguments="x:String" x:Key="in_AssetValue">
                      <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="ClassicFolderAsset(&quot;Value&quot;).ToString" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_AssetPassword">
                      <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Password" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_AssetScope" />
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
              </Sequence>
            </TryCatch.Try>
            <TryCatch.Catches>
              <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="587.333333333333,22" sap2010:WorkflowViewState.IdRef="Catch`1_2">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ActivityAction x:TypeArguments="s:Exception">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Failed to Create Global Asset in Modern Folder" sap:VirtualizedContainerService.HintSize="376,382.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_6">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign DisplayName="Assign io_MigrationExceptionsOccurred (Global Asset)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_6">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Boolean">[io_MigrationExceptionsOccurred]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:LogMessage DisplayName="Log Message (Failed to Create Global Asset in Modern Folder)" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Error" Message="[String.Format(in_Config(&quot;MigrateAssetFailure&quot;), AssetMigrationDetails(1).ToString, Exception.Message, Exception.Source)]">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:LogMessage>
                    <Assign DisplayName="Assign OperationResult (Global Asset)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_5">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[OperationResult]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[Exception.Message]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </ActivityAction>
              </Catch>
            </TryCatch.Catches>
            <TryCatch.Finally>
              <ui:ExcelApplicationScope Password="{x:Null}" WorkbookPath="{x:Null}" CreateNewFile="False" DisplayName="Excel Application Scope (Output Result - Global Asset)" ExistingWorkbook="[in_FolderMigrationWorkbook]" sap:VirtualizedContainerService.HintSize="434,195.333333333333" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_3" Visible="False">
                <ui:ExcelApplicationScope.Body>
                  <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                    </ActivityAction.Argument>
                    <ui:ExcelWriteCell Cell="[&quot;G&quot;+(2+AssetsMigrationDetails.Rows.IndexOf(AssetMigrationDetails)).ToString]" DisplayName="Write Cell (Migrate Global Asset Result)" sap:VirtualizedContainerService.HintSize="334,86.6666666666667" sap2010:WorkflowViewState.IdRef="ExcelWriteCell_2" SheetName="[in_Config(&quot;Assets&quot;)]" Text="[OperationResult]" />
                  </ActivityAction>
                </ui:ExcelApplicationScope.Body>
              </ui:ExcelApplicationScope>
            </TryCatch.Finally>
          </TryCatch>
        </ActivityAction>
      </ui:ForEach.Body>
    </ui:ForEach>
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Data about Users is used when searching for Users that will have values of Assets per Robot." DisplayName="Invoke GetUsersData Workflow" sap:VirtualizedContainerService.HintSize="658,132" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_6" UnSafe="False" WorkflowFileName="Entities\Users\GetUsersData.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
        <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_UsersData">[UsersData]</OutArgument>
        <InArgument x:TypeArguments="s:Int64[]" x:Key="in_FilterIDs">[{}]</InArgument>
        <InArgument x:TypeArguments="s:String[]" x:Key="in_FilterNames">[{}]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <ui:ForEach x:TypeArguments="sd:DataRow[]" CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="Consider only Assets per Robot, which are migrated to Modern Folder as Asset per User.&#xA;Group rows referring to different values of a single Asset per Robot and make a single HTTP request to create it." DisplayName="For Each Asset Per Robot" sap:VirtualizedContainerService.HintSize="658,572.666666666667" sap2010:WorkflowViewState.IdRef="ForEach`1_2" Values="[UnprocessedAssetDetails.Where(Function(Row) Row(2).ToString.ToLowerInvariant = &quot;robot&quot;).GroupBy(Function(Row) New With {Key.ClassicFolder = Row(0).ToString, Key.Asset = Row(1).ToString, Key.ModernFolder = Row(5).ToString}).Select(Function(PerRobotRows) PerRobotRows.Select(Function(Row) Row).ToArray()).ToArray()]">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="sd:DataRow[]">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="sd:DataRow[]" Name="AssetPerRobotMigrationDetails" />
          </ActivityAction.Argument>
          <TryCatch sap2010:Annotation.AnnotationText="Prevent the creation of different Assets per User to interfer with each other." DisplayName="Try Catch (Migrate Per Robot Asset to Modern Folder)" sap:VirtualizedContainerService.HintSize="438.666666666667,355.333333333333" sap2010:WorkflowViewState.IdRef="TryCatch_3">
            <TryCatch.Variables>
              <Variable x:TypeArguments="x:String" Default="[in_Config(&quot;OperationDefaultResult&quot;)]" Name="OperationResult" />
            </TryCatch.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <TryCatch.Try>
              <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke MigrateAssetsToDifferentFolders_MigrateAssetsPerRobot Workflow" sap:VirtualizedContainerService.HintSize="379.333333333333,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="Entities\Folders\MigrateClassicToModern\MigrateAssetsToDifferentFolders_MigrateAssetsPerRobot.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                  <InArgument x:TypeArguments="sd:DataRow[]" x:Key="in_AssetsPerRobotDetails">[AssetPerRobotMigrationDetails]</InArgument>
                  <InArgument x:TypeArguments="sd:DataTable" x:Key="in_UsersData">[UsersData]</InArgument>
                  <InArgument x:TypeArguments="sd:DataTable" x:Key="in_RobotsData">[in_ClassicFolderRobotsData]</InArgument>
                  <InArgument x:TypeArguments="sd:DataTable" x:Key="in_FoldersData">[in_FoldersData]</InArgument>
                  <InArgument x:TypeArguments="sd:DataTable" x:Key="in_ClassicFolderAssetsData">[in_ClassicFolderAssetsData]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
            </TryCatch.Try>
            <TryCatch.Catches>
              <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404.666666666667,22" sap2010:WorkflowViewState.IdRef="Catch`1_3">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ActivityAction x:TypeArguments="s:Exception">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Failed to Create Asset per User in Modern Folder" sap:VirtualizedContainerService.HintSize="376,388" sap2010:WorkflowViewState.IdRef="Sequence_12">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign DisplayName="Assign io_MigrationExceptionsOccurred (Asset per User)" sap:VirtualizedContainerService.HintSize="334,62" sap2010:WorkflowViewState.IdRef="Assign_11">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Boolean">[io_MigrationExceptionsOccurred]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:LogMessage DisplayName="Log Message (Failed to Create Asset per User in Modern Folder)" sap:VirtualizedContainerService.HintSize="334,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Error" Message="[String.Format(in_Config(&quot;MigrateAssetFailure&quot;), AssetPerRobotMigrationDetails.First()(1).ToString, Exception.Message, Exception.Source)]">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:LogMessage>
                    <Assign DisplayName="Assign OperationResult (Asset per User)" sap:VirtualizedContainerService.HintSize="334,62" sap2010:WorkflowViewState.IdRef="Assign_12">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[OperationResult]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[Exception.Message]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </ActivityAction>
              </Catch>
            </TryCatch.Catches>
            <TryCatch.Finally>
              <ui:ExcelApplicationScope Password="{x:Null}" WorkbookPath="{x:Null}" CreateNewFile="False" DisplayName="Excel Application Scope (Output Result - Asset per User)" ExistingWorkbook="[in_FolderMigrationWorkbook]" sap:VirtualizedContainerService.HintSize="434,330.666666666667" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_4" Visible="False">
                <ui:ExcelApplicationScope.Body>
                  <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                    </ActivityAction.Argument>
                    <ui:ForEach x:TypeArguments="sd:DataRow" CurrentIndex="{x:Null}" DisplayName="For Each Asset per Robot Row (Output Result - Asset per User)" sap:VirtualizedContainerService.HintSize="370.666666666667,222" sap2010:WorkflowViewState.IdRef="ForEach`1_4" Values="[AssetPerRobotMigrationDetails]">
                      <ui:ForEach.Body>
                        <ActivityAction x:TypeArguments="sd:DataRow">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="sd:DataRow" Name="AssetPerRobotRow" />
                          </ActivityAction.Argument>
                          <ui:ExcelWriteCell Cell="[&quot;G&quot;+(2+AssetsMigrationDetails.Rows.IndexOf(AssetPerRobotRow)).ToString]" DisplayName="Write Cell (Migrate Asset per User Result)" sap:VirtualizedContainerService.HintSize="334,86.6666666666667" sap2010:WorkflowViewState.IdRef="ExcelWriteCell_3" SheetName="[in_Config(&quot;Assets&quot;)]" Text="[OperationResult]" />
                        </ActivityAction>
                      </ui:ForEach.Body>
                    </ui:ForEach>
                  </ActivityAction>
                </ui:ExcelApplicationScope.Body>
              </ui:ExcelApplicationScope>
            </TryCatch.Finally>
          </TryCatch>
        </ActivityAction>
      </ui:ForEach.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ForEach>
  </Sequence>
</Activity>