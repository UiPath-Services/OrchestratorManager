<Activity mc:Ignorable="sap sap2010" x:Class="MigrateAssetsToDifferentFolders" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_ClassicFolderAssetsData" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_FoldersData" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, ui:GenericValue))" />
    <x:Property Name="in_FolderMigrationWorkbook" Type="InArgument(ui:WorkbookApplication)" />
    <x:Property Name="io_MigrationExceptionsOccurred" Type="InOutArgument(x:Boolean)" />
    <x:Property Name="in_ClassicFolderRobotsData" Type="InArgument(sd:DataTable)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>732.666666666667,2625.33333333333</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>MigrateAssetsToDifferentFolders_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="31">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="21">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Migrate Assets to the specified Modern Folders." DisplayName="Migrate Assets to Different Folders" sap:VirtualizedContainerService.HintSize="721.333333333333,2560.66666666667" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataTable" Name="AssetsMigrationDetails" />
      <Variable x:TypeArguments="sd:DataRow[]" Name="UnprocessedAssetsDetails" />
      <Variable x:TypeArguments="sd:DataTable" Name="UsersData" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:ExcelApplicationScope Password="{x:Null}" WorkbookPath="{x:Null}" CreateNewFile="False" DisplayName="Excel Application Scope (Migrate Assets)" ExistingWorkbook="[in_FolderMigrationWorkbook]" sap:VirtualizedContainerService.HintSize="679.333333333333,52.6666666666667" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_1" Visible="False">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Get Data and Rename Columns" sap:VirtualizedContainerService.HintSize="376,852.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_14">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ExcelReadRange AddHeaders="True" DataTable="[AssetsMigrationDetails]" DisplayName="Read Range (Migrate Assets Details)" sap:VirtualizedContainerService.HintSize="334,58.6666666666667" sap2010:WorkflowViewState.IdRef="ExcelReadRange_1" SheetName="[in_Config(&quot;Assets&quot;)]" UseFilter="True">
              <ui:ExcelReadRange.Range>
                <InArgument x:TypeArguments="x:String">
                  <Literal x:TypeArguments="x:String" Value="" />
                </InArgument>
              </ui:ExcelReadRange.Range>
            </ui:ExcelReadRange>
            <Assign DisplayName="Assign ClassicFolderName Column" sap:VirtualizedContainerService.HintSize="334,62" sap2010:WorkflowViewState.IdRef="Assign_14">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[AssetsMigrationDetails.Columns(0).ColumnName]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">ClassicFolderName</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign AssetName Column" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_15">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[AssetsMigrationDetails.Columns(1).ColumnName]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">["AssetName"]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign Scope Column" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_16">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[AssetsMigrationDetails.Columns(2).ColumnName]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">Scope</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign RobotName Column" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_17">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[AssetsMigrationDetails.Columns(3).ColumnName]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">RobotName</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign Type Column" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_18">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[AssetsMigrationDetails.Columns(4).ColumnName]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">Type</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign ModernFolderName Column" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_19">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[AssetsMigrationDetails.Columns(5).ColumnName]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">ModernFolderName</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign Result Column" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_20">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[AssetsMigrationDetails.Columns(6).ColumnName]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">Result</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ExcelApplicationScope>
    <Assign sap2010:Annotation.AnnotationText="Select only rows that do not have a value in the Result column and that specify a value for the Modern Folder Name column." DisplayName="Assign UnprocessedAssetsDetails" sap:VirtualizedContainerService.HintSize="679.333333333333,140.666666666667" sap2010:WorkflowViewState.IdRef="Assign_7">
      <Assign.To>
        <OutArgument x:TypeArguments="sd:DataRow[]">[UnprocessedAssetsDetails]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="sd:DataRow[]">[AssetsMigrationDetails.AsEnumerable().Where(Function(Row) String.IsNullOrWhiteSpace(Row("Result").ToString) AndAlso Not String.IsNullOrWhiteSpace(Row("ModernFolderName").ToString)).ToArray()]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Data about Users is used when searching for Users that will have values of Assets per Robot." DisplayName="Invoke GetUsersData Workflow" sap:VirtualizedContainerService.HintSize="679.333333333333,132" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_11" UnSafe="False" WorkflowFileName="Entities\Users\GetUsersData.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
        <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_UsersData">[UsersData]</OutArgument>
        <InArgument x:TypeArguments="s:Int64[]" x:Key="in_FilterIDs">[{}]</InArgument>
        <InArgument x:TypeArguments="s:String[]" x:Key="in_FilterNames">[{}]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <ui:ForEach x:TypeArguments="sd:DataRow[]" CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="Consider groups of unprocessed rows that define an Asset using the same name and in the same Classic Folder and that should be created in the same Modern Folder.&#xA;In other words, all rows in a group have the same values for ClassicFolderName, AssetName and ModernFolderName.&#xA;&#xA;In the case of global Assets, there should be only one row per group.&#xA;In the case of Assets per Robot, there might be one or more rows, each representing a value, as well as a global value used as default value for the Asset." DisplayName="For Each Group of Rows Defining an Asset of the Same Name" sap:VirtualizedContainerService.HintSize="679.333333333333,1992.66666666667" sap2010:WorkflowViewState.IdRef="ForEach`1_5" Values="[UnprocessedAssetsDetails.GroupBy(Function(Row) New With {Key.ClassicFolderName = Row(&quot;ClassicFolderName&quot;).ToString, Key.AssetName = Row(&quot;AssetName&quot;).ToString, Key.ModernFolderName = Row(&quot;ModernFolderName&quot;).ToString}).Select(Function(PerRobotUserRows) PerRobotUserRows.ToArray()).ToArray()]">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="sd:DataRow[]">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="sd:DataRow[]" Name="AssetsDetailsGroupedRows" />
          </ActivityAction.Argument>
          <TryCatch sap2010:Annotation.AnnotationText="Prevent the creation of different Assets to interfer with each other." DisplayName="Try Catch (Migrate Asset to Modern Folder)" sap:VirtualizedContainerService.HintSize="642.666666666667,1725.33333333333" sap2010:WorkflowViewState.IdRef="TryCatch_4">
            <TryCatch.Variables>
              <Variable x:TypeArguments="x:String" Default="[in_Config(&quot;OperationDefaultResult&quot;)]" Name="OperationResult" />
            </TryCatch.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <TryCatch.Try>
              <Sequence DisplayName="Create Asset in Modern Folder" sap:VirtualizedContainerService.HintSize="604,1456.66666666667" sap2010:WorkflowViewState.IdRef="Sequence_15">
                <Sequence.Variables>
                  <Variable x:TypeArguments="sd:DataRow[]" Name="ClassicFolderAssetGroupedRows" />
                  <Variable x:TypeArguments="x:String" Name="ClassicFolderName" />
                  <Variable x:TypeArguments="x:String" Name="AssetName" />
                  <Variable x:TypeArguments="sd:DataTable" Name="AssetDetailsToMigrate" />
                  <Variable x:TypeArguments="x:String" Name="ModernFolderName" />
                  <Variable x:TypeArguments="x:Int64" Name="ClassicFolderID" />
                  <Variable x:TypeArguments="x:Int64" Name="ModernFolderID" />
                  <Variable x:TypeArguments="x:String" Name="AssetScope" />
                  <Variable x:TypeArguments="scg:List(scg:Dictionary(x:String, x:Object))" Name="UsersValues" />
                  <Variable x:TypeArguments="x:String" Name="AssetGlobalValue" />
                  <Variable x:TypeArguments="x:String" Name="AssetGlobalPassword" />
                  <Variable x:TypeArguments="x:String" Name="AssetType" />
                  <Variable x:TypeArguments="x:Boolean" Name="HasDefaultValue" />
                  <Variable x:TypeArguments="sd:DataTable" Name="ModernFolderAssetsData" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Sequence DisplayName="Confirm Folders IDs and Names" sap:VirtualizedContainerService.HintSize="562,69.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_17">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If Condition="[String.IsNullOrWhiteSpace(AssetsDetailsGroupedRows.First()(&quot;ClassicFolderName&quot;).ToString)]" DisplayName="If Row Group Has Classic Folder Name Defined" sap:VirtualizedContainerService.HintSize="507,208" sap2010:WorkflowViewState.IdRef="If_6">
                    <If.Then>
                      <Throw DisplayName="Throw (Classic Folder Name not Specified)" Exception="[New ArgumentException(in_Config(&quot;ClassicFolderNameNotSpecified&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_5" />
                    </If.Then>
                    <If.Else>
                      <Assign DisplayName="Assign ClassicFolderName" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_22">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[ClassicFolderName]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">[AssetsDetailsGroupedRows.First()("ClassicFolderName").ToString]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                  <If Condition="[in_FoldersData.Rows.Find({ClassicFolderName}) Is Nothing]" DisplayName="If Classic Folder Exists" sap:VirtualizedContainerService.HintSize="507,208" sap2010:WorkflowViewState.IdRef="If_9">
                    <If.Then>
                      <Throw DisplayName="Throw (Classic Folder not Found)" Exception="[New ArgumentException(in_Config(&quot;NamedFolderNotFound&quot;), ClassicFolderName)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_7" />
                    </If.Then>
                    <If.Else>
                      <Assign DisplayName="Assign ClassicFolderID" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_33">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Int64">[ClassicFolderID]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Int64">[Convert.ToInt64(in_FoldersData.Rows.Find({ClassicFolderName})("ID"))]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                  <Assign sap2010:Annotation.AnnotationText="It is not necessary to verify whether the Modern Folder is specified because this was already done when filtering rows in the activity Assign UnprocessedAssetsDetails." DisplayName="Assign ModernFolderName" sap:VirtualizedContainerService.HintSize="507,147" sap2010:WorkflowViewState.IdRef="Assign_26">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[ModernFolderName]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[AssetsDetailsGroupedRows.First()("ModernFolderName").ToString]</InArgument>
                    </Assign.Value>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </Assign>
                  <If Condition="[in_FoldersData.Rows.Find({ModernFolderName}) Is Nothing]" DisplayName="If Modern Folder Exists" sap:VirtualizedContainerService.HintSize="507,208" sap2010:WorkflowViewState.IdRef="If_12">
                    <If.Then>
                      <Throw DisplayName="Throw (Modern Folder not Found)" Exception="[New ArgumentException(in_Config(&quot;NamedFolderNotFound&quot;), ModernFolderName)]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_10" />
                    </If.Then>
                  </If>
                </Sequence>
                <Sequence DisplayName="Confirm Asset ID/Name" sap:VirtualizedContainerService.HintSize="562,69.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_19">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If Condition="[String.IsNullOrWhiteSpace(AssetsDetailsGroupedRows.First()(&quot;AssetName&quot;).ToString)]" DisplayName="If Row Group Has Asset Name Defined" sap:VirtualizedContainerService.HintSize="507,208" sap2010:WorkflowViewState.IdRef="If_7">
                    <If.Then>
                      <Throw DisplayName="Throw (Asset Name not Specified)" Exception="[New ArgumentException(in_Config(&quot;AssetNameNotSpecified&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_6" />
                    </If.Then>
                    <If.Else>
                      <Assign DisplayName="Assign AssetName" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_23">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[AssetName]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">[AssetsDetailsGroupedRows.First()("AssetName").ToString]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                  <If Condition="[in_ClassicFolderAssetsData.AsEnumerable().Where(Function(Row) Row(&quot;OUFolderName&quot;).ToString = ClassicFolderName AndAlso Row(&quot;AssetName&quot;).ToString = AssetName).Count() = 0]" DisplayName="If Asset Exists in Classic Folder" sap:VirtualizedContainerService.HintSize="507,208" sap2010:WorkflowViewState.IdRef="If_10">
                    <If.Then>
                      <Throw DisplayName="Throw (Asset not Found)" Exception="[New ArgumentException(in_Config(&quot;AssetNotFound&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_8" />
                    </If.Then>
                  </If>
                </Sequence>
                <Assign sap2010:Annotation.AnnotationText="Get all rows referring to the given Asset in the given Classic Folder." DisplayName="Assign ClassicFolderAssetGroupedRows" sap:VirtualizedContainerService.HintSize="562,107.333333333333" sap2010:WorkflowViewState.IdRef="Assign_21">
                  <Assign.To>
                    <OutArgument x:TypeArguments="sd:DataRow[]">[ClassicFolderAssetGroupedRows]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="sd:DataRow[]">[in_ClassicFolderAssetsData.AsEnumerable().Where(Function(Row) Row("OUFolderName").ToString = ClassicFolderName AndAlso Row("AssetName").ToString = AssetName).ToArray()]</InArgument>
                  </Assign.Value>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Assign>
                <ui:BuildDataTable sap2010:Annotation.AnnotationText="Auxiliary DataTable to hold details of Asset to be created in Modern Folder, including the name of the Modern Folder instead of the original Classic Folder and also the username of the User instead of the name of the original Robot." DataTable="[AssetDetailsToMigrate]" DisplayName="Build Data Table (Assets Details to Migrate)" sap:VirtualizedContainerService.HintSize="562,154" sap2010:WorkflowViewState.IdRef="BuildDataTable_1" TableInfo="&lt;NewDataSet&gt;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xA;      &lt;xs:complexType&gt;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xA;            &lt;xs:complexType&gt;&#xA;              &lt;xs:sequence&gt;&#xA;                &lt;xs:element name=&quot;OUFolderName&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;AssetName&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;Scope&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;RobotUserName&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;Type&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;Value&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;Password&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot; /&gt;&#xA;              &lt;/xs:sequence&gt;&#xA;            &lt;/xs:complexType&gt;&#xA;          &lt;/xs:element&gt;&#xA;        &lt;/xs:choice&gt;&#xA;      &lt;/xs:complexType&gt;&#xA;    &lt;/xs:element&gt;&#xA;  &lt;/xs:schema&gt;&#xA;&lt;/NewDataSet&gt;">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:BuildDataTable>
                <ui:ForEach x:TypeArguments="sd:DataRow" CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="In case of splitting an Asset into multiple Modern Folders, confirm what values should be migrated." DisplayName="For Each Classic Folder's Asset Row" sap:VirtualizedContainerService.HintSize="562,424.666666666667" sap2010:WorkflowViewState.IdRef="ForEach`1_6" Values="[ClassicFolderAssetGroupedRows]">
                  <ui:ForEach.Body>
                    <ActivityAction x:TypeArguments="sd:DataRow">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="sd:DataRow" Name="ClassicFolderAssetGroupedRow" />
                      </ActivityAction.Argument>
                      <If Condition="[AssetsDetailsGroupedRows.Where(Function(Row) Row(&quot;Scope&quot;).ToString = ClassicFolderAssetGroupedRow(&quot;Scope&quot;).ToString AndAlso Row(&quot;RobotName&quot;).ToString = ClassicFolderAssetGroupedRow(&quot;RobotUserName&quot;).ToString).Count() = 1]" DisplayName="If Classic Folder's Asset Value Should Be Migrated" sap:VirtualizedContainerService.HintSize="525.333333333333,240.666666666667" sap2010:WorkflowViewState.IdRef="If_13">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If.Then>
                          <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke MigrateAssets_MergeClassicFolderDataWithModernFolderData Workflow" sap:VirtualizedContainerService.HintSize="379.333333333333,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_14" UnSafe="False" WorkflowFileName="Entities\Folders\MigrateClassicToModern\MigrateAssets_MergeClassicFolderDataWithModernFolderData.xaml">
                            <ui:InvokeWorkflowFile.Arguments>
                              <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                              <InArgument x:TypeArguments="sd:DataRow" x:Key="in_ClassicFolderAssetGroupedRow">[ClassicFolderAssetGroupedRow]</InArgument>
                              <InArgument x:TypeArguments="sd:DataTable" x:Key="in_ClassicFolderRobotsData">[in_ClassicFolderRobotsData]</InArgument>
                              <InArgument x:TypeArguments="sd:DataTable" x:Key="in_UsersData">[UsersData]</InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_ModernFolderName">[ModernFolderName]</InArgument>
                              <InArgument x:TypeArguments="x:Int64" x:Key="in_ClassicFolderID">[ClassicFolderID]</InArgument>
                              <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_AssetDetailsToMigrate">[AssetDetailsToMigrate]</InOutArgument>
                            </ui:InvokeWorkflowFile.Arguments>
                          </ui:InvokeWorkflowFile>
                        </If.Then>
                      </If>
                    </ActivityAction>
                  </ui:ForEach.Body>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:ForEach>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke GetAssetsData Workflow" sap:VirtualizedContainerService.HintSize="562,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_13" UnSafe="False" WorkflowFileName="Entities\Assets\GetAssetsData.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                    <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_AssetsData">[ModernFolderAssetsData]</OutArgument>
                    <InArgument x:TypeArguments="sd:DataTable" x:Key="in_OUFoldersData">[{in_FoldersData.Rows.Find({ModernFolderName})}.CopyToDataTable()]</InArgument>
                    <OutArgument x:TypeArguments="x:Boolean" x:Key="out_AllOUFoldersAccessed" />
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke CreateAsset_PrepareRequestData Workflow" sap:VirtualizedContainerService.HintSize="562,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_9" UnSafe="False" WorkflowFileName="Entities\Assets\CreateAsset_PrepareRequestData.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="sd:DataRow[]" x:Key="in_AssetGroupedRows">[AssetDetailsToMigrate.AsEnumerable().ToArray()]</InArgument>
                    <InArgument x:TypeArguments="sd:DataTable" x:Key="in_OUFoldersData">[in_FoldersData]</InArgument>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                    <InArgument x:TypeArguments="sd:DataTable" x:Key="in_RobotsData">[in_ClassicFolderRobotsData]</InArgument>
                    <InArgument x:TypeArguments="sd:DataTable" x:Key="in_UsersData">[UsersData]</InArgument>
                    <OutArgument x:TypeArguments="x:Int64" x:Key="out_OUFolderID">[ModernFolderID]</OutArgument>
                    <OutArgument x:TypeArguments="x:String" x:Key="out_AssetName">[AssetName]</OutArgument>
                    <OutArgument x:TypeArguments="x:String" x:Key="out_AssetScope">[AssetScope]</OutArgument>
                    <OutArgument x:TypeArguments="scg:List(scg:Dictionary(x:String, x:Object))" x:Key="out_RobotUsersValues">[UsersValues]</OutArgument>
                    <OutArgument x:TypeArguments="x:String" x:Key="out_AssetGlobalValue">[AssetGlobalValue]</OutArgument>
                    <OutArgument x:TypeArguments="x:String" x:Key="out_AssetGlobalPassword">[AssetGlobalPassword]</OutArgument>
                    <InArgument x:TypeArguments="sd:DataTable" x:Key="in_AssetsData">[ModernFolderAssetsData]</InArgument>
                    <OutArgument x:TypeArguments="x:String" x:Key="out_AssetType">[AssetType]</OutArgument>
                    <OutArgument x:TypeArguments="x:Boolean" x:Key="out_HasDefaultValue">[HasDefaultValue]</OutArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke CreateAssetRequest Workflow" sap:VirtualizedContainerService.HintSize="562,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_10" UnSafe="False" WorkflowFileName="Entities\Assets\CreateAssetRequest.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="x:Int64" x:Key="in_OUFolderID">[ModernFolderID]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_AssetName">[AssetName]</InArgument>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_AssetType">[AssetType]</InArgument>
                    <OutArgument x:TypeArguments="x:Int64" x:Key="out_AssetID" />
                    <InArgument x:TypeArguments="scg:List(scg:Dictionary(x:String, x:Object))" x:Key="in_RobotUsersValues">[UsersValues]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_AssetValue">[AssetGlobalValue]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_AssetPassword">[AssetGlobalPassword]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_AssetScope">[AssetScope]</InArgument>
                    <InArgument x:TypeArguments="x:Boolean" x:Key="in_HasDefaultValue">[HasDefaultValue]</InArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
              </Sequence>
            </TryCatch.Try>
            <TryCatch.Catches>
              <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="608.666666666667,22" sap2010:WorkflowViewState.IdRef="Catch`1_4">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ActivityAction x:TypeArguments="s:Exception">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Failed to Create Asset in Modern Folder" sap:VirtualizedContainerService.HintSize="376,382" sap2010:WorkflowViewState.IdRef="Sequence_22">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign DisplayName="Assign io_MigrationExceptionsOccurred" sap:VirtualizedContainerService.HintSize="334,62" sap2010:WorkflowViewState.IdRef="Assign_37">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Boolean">[io_MigrationExceptionsOccurred]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:LogMessage DisplayName="Log Message (Failed to Create Asset in Modern Folder)" sap:VirtualizedContainerService.HintSize="334,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Error" Message="[String.Format(in_Config(&quot;MigrateAssetFailure&quot;), AssetsMigrationDetails(1).ToString, Exception.Message, Exception.Source)]">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:LogMessage>
                    <Assign DisplayName="Assign OperationResult" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_38">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[OperationResult]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[Exception.Message]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </ActivityAction>
              </Catch>
            </TryCatch.Catches>
            <TryCatch.Finally>
              <ui:ExcelApplicationScope Password="{x:Null}" WorkbookPath="{x:Null}" CreateNewFile="False" DisplayName="Excel Application Scope (Output Result)" ExistingWorkbook="[in_FolderMigrationWorkbook]" sap:VirtualizedContainerService.HintSize="434,329" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_5" Visible="False">
                <ui:ExcelApplicationScope.Body>
                  <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                    </ActivityAction.Argument>
                    <ui:ForEach x:TypeArguments="sd:DataRow" CurrentIndex="{x:Null}" DisplayName="For Each Asset per Robot Row (Output Result)" sap:VirtualizedContainerService.HintSize="370,220" sap2010:WorkflowViewState.IdRef="ForEach`1_7" Values="[AssetsDetailsGroupedRows]">
                      <ui:ForEach.Body>
                        <ActivityAction x:TypeArguments="sd:DataRow">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="sd:DataRow" Name="AssetPerRobotRow" />
                          </ActivityAction.Argument>
                          <ui:ExcelWriteCell Cell="[&quot;G&quot;+(2+AssetsMigrationDetails.Rows.IndexOf(AssetPerRobotRow)).ToString]" DisplayName="Write Cell (Result)" sap:VirtualizedContainerService.HintSize="334,87" sap2010:WorkflowViewState.IdRef="ExcelWriteCell_4" SheetName="[in_Config(&quot;Assets&quot;)]" Text="[OperationResult]" />
                        </ActivityAction>
                      </ui:ForEach.Body>
                    </ui:ForEach>
                  </ActivityAction>
                </ui:ExcelApplicationScope.Body>
              </ui:ExcelApplicationScope>
            </TryCatch.Finally>
          </TryCatch>
        </ActivityAction>
      </ui:ForEach.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ForEach>
  </Sequence>
</Activity>