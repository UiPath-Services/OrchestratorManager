<Activity mc:Ignorable="sap sap2010" x:Class="MigrateAssetsToDifferentFolders_MigrateAssetsPerRobot" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, ui:GenericValue))">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property Name="in_AssetsPerRobotDetails" Type="InArgument(sd:DataRow[])" />
    <x:Property Name="in_UsersData" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_RobotsData" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_FoldersData" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_ClassicFolderAssetsData" Type="InArgument(sd:DataTable)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1322,4614</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>MigrateAssetsToDifferentFolders_MigrateAssetsPerRobot_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="26">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="20">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Create an Asset per User based on data of an Asset per User.&#xA;&#xA;Indexes are used instead of column names due to localization of the Excel sheet:&#xA;- in_AssetsPerRobotDetails(0) refers to Classic Folder name&#xA;- in_AssetsPerRobotDetails(1) refers to Asset name&#xA;- in_AssetsPerRobotDetails(2) refers to Asset scope&#xA;- in_AssetsPerRobotDetails(3) refers to Robot's name (in case of Asset per Robot)&#xA;- in_AssetsPerRobotDetails(4) refers to Asset type&#xA;- in_AssetsPerRobotDetails(5) refers to Modern Folder name&#xA;- in_AssetsPerRobotDetails(6) refers to Result" DisplayName="Migrate Assets To Different Folders - Migrate Assets Per Robot" sap:VirtualizedContainerService.HintSize="1018.66666666667,4549.33333333333" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int64" Name="AssetID" />
      <Variable x:TypeArguments="x:Int64" Name="ModernFolderID" />
      <Variable x:TypeArguments="x:String" Name="AssetName" />
      <Variable x:TypeArguments="x:String" Name="Scope" />
      <Variable x:TypeArguments="x:String" Name="Type" />
      <Variable x:TypeArguments="sd:DataRow[]" Name="ClassicFolderAssetRobotValues" />
      <Variable x:TypeArguments="scg:List(scg:Dictionary(x:String, x:Object))" Default="[New List(Of Dictionary(Of String, Object))]" Name="UsersValues" />
      <Variable x:TypeArguments="x:Int64" Name="ClassicFolderID" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Sequence sap2010:Annotation.AnnotationText="Since this workflow receives as argument grouped rows that have the same OU/Folder name, same Asset name and same Asset scope, it is not necessary to verify if all rows have the same value for these fields." DisplayName="Confirm Data Common to Multiple Robots/Users" sap:VirtualizedContainerService.HintSize="976.666666666667,1926.66666666667" sap2010:WorkflowViewState.IdRef="Sequence_2">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:String" Name="ModernFolderName" />
      </Sequence.Variables>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Sequence DisplayName="Validate Folders" sap:VirtualizedContainerService.HintSize="622,768" sap2010:WorkflowViewState.IdRef="Sequence_4">
        <Sequence.Variables>
          <Variable x:TypeArguments="x:String" Name="ClassicFolderName" />
        </Sequence.Variables>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <Assign DisplayName="Assign ClassicFolderName" sap:VirtualizedContainerService.HintSize="508,62" sap2010:WorkflowViewState.IdRef="Assign_11">
          <Assign.To>
            <OutArgument x:TypeArguments="x:String">[ClassicFolderName]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:String">[in_AssetsPerRobotDetails.First()(0).ToString]</InArgument>
          </Assign.Value>
        </Assign>
        <If Condition="[in_FoldersData.Rows.Find({ClassicFolderName}) Is Nothing]" DisplayName="If Specified Classic Folder Exists" sap:VirtualizedContainerService.HintSize="508,216" sap2010:WorkflowViewState.IdRef="If_4">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If.Then>
            <Throw DisplayName="Throw (Classic Folder Not Found)" Exception="[New ArgumentException(String.Format(in_Config(&quot;NamedFolderNotFound&quot;), ClassicFolderName))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_4" />
          </If.Then>
          <If.Else>
            <Assign DisplayName="Assign ClassicFolderID" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_8">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int64">[ClassicFolderID]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int64">[Convert.ToInt64(in_FoldersData.Rows.Find({ClassicFolderName})("ID"))]</InArgument>
              </Assign.Value>
            </Assign>
          </If.Else>
        </If>
        <Assign DisplayName="Assign ModernFolderName" sap:VirtualizedContainerService.HintSize="508,62" sap2010:WorkflowViewState.IdRef="Assign_2">
          <Assign.To>
            <OutArgument x:TypeArguments="x:String">[ModernFolderName]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:String">[in_AssetsPerRobotDetails.First()(5).ToString]</InArgument>
          </Assign.Value>
        </Assign>
        <If Condition="[in_FoldersData.Rows.Find({ModernFolderName}) Is Nothing]" DisplayName="If Specified Modern Folder Exists" sap:VirtualizedContainerService.HintSize="508,216" sap2010:WorkflowViewState.IdRef="If_5">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If.Then>
            <Throw DisplayName="Throw (Modern Folder Not Found)" Exception="[New ArgumentException(String.Format(in_Config(&quot;NamedFolderNotFound&quot;), ModernFolderName))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_5" />
          </If.Then>
          <If.Else>
            <Assign DisplayName="Assign ModernFolderID" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_9">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int64">[ModernFolderID]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int64">[Convert.ToInt64(in_FoldersData.Rows.Find({ModernFolderName})("ID"))]</InArgument>
              </Assign.Value>
            </Assign>
          </If.Else>
        </If>
      </Sequence>
      <If Condition="[in_AssetsPerRobotDetails.Select(Function(Row) Row(4).ToString).Distinct().Count() &lt;&gt; 1]" DisplayName="If Types of All per Robot Values Are the Same" sap:VirtualizedContainerService.HintSize="622,216" sap2010:WorkflowViewState.IdRef="If_1">
        <If.Then>
          <Throw DisplayName="Throw (Different Asset per Robot/User Type Defined)" Exception="[New ArgumentException(in_Config(&quot;DifferentAssetPerRobotUserTypes&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_1" />
        </If.Then>
        <If.Else>
          <Assign DisplayName="Assign AssetType" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_6">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[Type]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[in_AssetsPerRobotDetails.First()(4).ToString]</InArgument>
            </Assign.Value>
          </Assign>
        </If.Else>
      </If>
      <Assign DisplayName="Assign Scope" sap:VirtualizedContainerService.HintSize="622,62" sap2010:WorkflowViewState.IdRef="Assign_4">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[Scope]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">User</InArgument>
        </Assign.Value>
      </Assign>
      <Sequence DisplayName="Get Classic Folder's Asset per Robot" sap:VirtualizedContainerService.HintSize="622,623.333333333333" sap2010:WorkflowViewState.IdRef="Sequence_5">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <Assign DisplayName="Assign AssetName" sap:VirtualizedContainerService.HintSize="580,62" sap2010:WorkflowViewState.IdRef="Assign_3">
          <Assign.To>
            <OutArgument x:TypeArguments="x:String">[AssetName]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:String">[in_AssetsPerRobotDetails.First()(1).ToString]</InArgument>
          </Assign.Value>
        </Assign>
        <Assign sap2010:Annotation.AnnotationText="Get original Asset values from Classic Folder to use its data when making the request to create a new one in the target Modern Folder." DisplayName="Assign ClassicFolderAssetValues" sap:VirtualizedContainerService.HintSize="580,140.666666666667" sap2010:WorkflowViewState.IdRef="Assign_12">
          <Assign.To>
            <OutArgument x:TypeArguments="sd:DataRow[]">[ClassicFolderAssetRobotValues]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="sd:DataRow[]">[in_ClassicFolderAssetsData.AsEnumerable().Where(Function(Row) Row("AssetName").ToString = AssetName).ToArray()]</InArgument>
          </Assign.Value>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Assign>
        <If Condition="[ClassicFolderAssetRobotValues.Count() = 0]" DisplayName="If Asset Exists in Classic Folder" sap:VirtualizedContainerService.HintSize="580,248.666666666667" sap2010:WorkflowViewState.IdRef="If_6">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If.Then>
            <Throw DisplayName="Throw (Asset Not Found)" Exception="[New ArgumentException(in_Config(&quot;AssetNotFound&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_6" />
          </If.Then>
          <If.Else>
            <ui:LogMessage DisplayName="Log Message (Migrate Per Robot Asset)" sap:VirtualizedContainerService.HintSize="334,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Trace" Message="[String.Format(in_Config(&quot;MigrateAsset&quot;), ClassicFolderAssetRobotValues.First()(&quot;AssetName&quot;).ToString)]" />
          </If.Else>
        </If>
      </Sequence>
    </Sequence>
    <ui:ForEach x:TypeArguments="sd:DataRow" CurrentIndex="{x:Null}" DisplayName="For Each Robot Value" sap:VirtualizedContainerService.HintSize="976.666666666667,2185.33333333333" sap2010:WorkflowViewState.IdRef="ForEach`1_2" Values="[ClassicFolderAssetRobotValues]">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="sd:DataRow">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="sd:DataRow" Name="AssetPerRobotValues" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="940,2046.66666666667" sap2010:WorkflowViewState.IdRef="Sequence_11">
            <Sequence.Variables>
              <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" Default="[New Dictionary(Of String, Object)]" Name="SingleUserValues" />
              <Variable x:TypeArguments="x:String" Name="RobotUserRawValue" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign DisplayName="Assign Robot Asset Value" sap:VirtualizedContainerService.HintSize="898,62" sap2010:WorkflowViewState.IdRef="Assign_16">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[RobotUserRawValue]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[AssetPerRobotValues("Value").ToString]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Assign Robot/User Asset Type" sap:VirtualizedContainerService.HintSize="898,62" sap2010:WorkflowViewState.IdRef="Assign_17">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Object">[SingleUserValues("ValueType")]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Object">[Type]</InArgument>
              </Assign.Value>
            </Assign>
            <Sequence sap2010:Annotation.AnnotationText="Try to find a User whose provisioned robot's username match the username used by the Robot in the Classic Folder." DisplayName="Initialize User Fields (ID and Name)" sap:VirtualizedContainerService.HintSize="898,792.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_9">
              <Sequence.Variables>
                <Variable x:TypeArguments="x:String" Name="Username" />
                <Variable x:TypeArguments="sd:DataRow[]" Name="UsersWithRobotsHavingSpecifiedUsername" />
                <Variable x:TypeArguments="x:String" Name="RobotName" />
              </Sequence.Variables>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign DisplayName="Assign RobotName" sap:VirtualizedContainerService.HintSize="496.666666666667,62" sap2010:WorkflowViewState.IdRef="Assign_30">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[RobotName]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[AssetPerRobotValues("RobotUserName").ToString]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign Username" sap:VirtualizedContainerService.HintSize="496.666666666667,62" sap2010:WorkflowViewState.IdRef="Assign_21">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[Username]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[in_RobotsData.Rows.Find({ClassicFolderID, RobotName})("Username").ToString]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign UserName" sap:VirtualizedContainerService.HintSize="496.666666666667,62" sap2010:WorkflowViewState.IdRef="Assign_22">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Object">[SingleUserValues("UserName")]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Object">[Username]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign sap2010:Annotation.AnnotationText="Search for Users whose assiciated Robots have the specified username. &#xA;Only considers Users of type User and DirectoryUser." DisplayName="Assign UsersWithRobotsHavingSpecifiedUsername" sap:VirtualizedContainerService.HintSize="496.666666666667,140.666666666667" sap2010:WorkflowViewState.IdRef="Assign_23">
                <Assign.To>
                  <OutArgument x:TypeArguments="sd:DataRow[]">[UsersWithRobotsHavingSpecifiedUsername]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="sd:DataRow[]">[in_UsersData.AsEnumerable().Where(Function(UserRow) {"User", "DirectoryUser"}.Contains(UserRow("Type").ToString) AndAlso (UserRow("ARUsername").ToString = Username OrElse UserRow("URUsername").ToString = Username)).ToArray()]</InArgument>
                </Assign.Value>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </Assign>
              <Switch x:TypeArguments="x:Int32" DisplayName="Switch Number of Users Found with Robot Having Specified Username" Expression="[UsersWithRobotsHavingSpecifiedUsername.Count()]" sap:VirtualizedContainerService.HintSize="496.666666666667,168.666666666667" sap2010:WorkflowViewState.IdRef="Switch`1_3">
                <Switch.Default>
                  <Throw sap2010:Annotation.AnnotationText="Multiple Users with associated Robots having the same username found." DisplayName="Throw (Multiple Users same Username)" Exception="[New Exception(in_Config(&quot;MultipleUsersWithSameRobotUsername&quot;))]" sap:VirtualizedContainerService.HintSize="200,84" sap2010:WorkflowViewState.IdRef="Throw_14">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </Throw>
                </Switch.Default>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Throw x:Key="0" DisplayName="Throw (Invalid User Name)" Exception="[New ArgumentException(String.Format(in_Config(&quot;NamedUserNotFound&quot;), Username))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_8" />
                <Assign x:Key="1" DisplayName="Assign UserID (Single User Found)" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_31">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Object">[SingleUserValues("UserId")]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Object">[Convert.ToInt64(UsersWithRobotsHavingSpecifiedUsername.First()("ID"))]</InArgument>
                  </Assign.Value>
                </Assign>
              </Switch>
            </Sequence>
            <Switch x:TypeArguments="x:String" DisplayName="Switch Type" Expression="[Type.ToLowerInvariant]" sap:VirtualizedContainerService.HintSize="898,856" sap2010:WorkflowViewState.IdRef="Switch`1_2">
              <Switch.Default>
                <Throw DisplayName="Throw (Unsupported Type)" Exception="[New ArgumentException(in_Config(&quot;UnsupportedAssetType&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_12" />
              </Switch.Default>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign x:Key="text" DisplayName="Assign Text Value" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_25">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Object">[SingleUserValues("StringValue")]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Object">[RobotUserRawValue]</InArgument>
                </Assign.Value>
              </Assign>
              <If x:Key="bool" Condition="[String.IsNullOrWhiteSpace(RobotUserRawValue) OrElse Not Boolean.TryParse(RobotUserRawValue, Nothing)]" DisplayName="If Value Is a Valid Boolean" sap:VirtualizedContainerService.HintSize="508,216" sap2010:WorkflowViewState.IdRef="If_8">
                <If.Then>
                  <Throw DisplayName="Throw (Invalid Boolean Value)" Exception="[New ArgumentException(in_Config(&quot;InvalidAssetValue&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_10" />
                </If.Then>
                <If.Else>
                  <Assign DisplayName="Assign Bool Value" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_26">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Object">[SingleUserValues("BoolValue")]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Object">[Convert.ToBoolean(RobotUserRawValue)]</InArgument>
                    </Assign.Value>
                  </Assign>
                </If.Else>
              </If>
              <If x:Key="integer" Condition="[String.IsNullOrWhiteSpace(RobotUserRawValue) OrElse Not Int32.TryParse(RobotUserRawValue, Nothing)]" DisplayName="If Value Is a Valid Integer" sap:VirtualizedContainerService.HintSize="508,216" sap2010:WorkflowViewState.IdRef="If_9">
                <If.Then>
                  <Throw DisplayName="Throw (Invalid Integer Value)" Exception="[New ArgumentException(in_Config(&quot;InvalidAssetValue&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_11" />
                </If.Then>
                <If.Else>
                  <Assign DisplayName="Assign Integer Value" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_27">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Object">[SingleUserValues("IntValue")]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Object">[Convert.ToInt32(RobotUserRawValue)]</InArgument>
                    </Assign.Value>
                  </Assign>
                </If.Else>
              </If>
              <Sequence x:Key="credential" DisplayName="Credential Asset Username and Password" sap:VirtualizedContainerService.HintSize="858,594.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_10">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign DisplayName="Assign Username Value" sap:VirtualizedContainerService.HintSize="816,62" sap2010:WorkflowViewState.IdRef="Assign_28">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Object">[SingleUserValues("CredentialUsername")]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[AssetPerRobotValues("Value").ToString]</InArgument>
                  </Assign.Value>
                </Assign>
                <If sap2010:Annotation.AnnotationText="Determine whether credential Assets without a password should be created with a password containing only a blank space." Condition="[String.IsNullOrEmpty(AssetPerRobotValues(&quot;Password&quot;).ToString)]" DisplayName="If Password not Defined" sap:VirtualizedContainerService.HintSize="816,400.666666666667" sap2010:WorkflowViewState.IdRef="If_11">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If.Then>
                    <If Condition="[Convert.ToBoolean(in_Config(&quot;ShouldCreateBlankSpacePassword&quot;).ToString)]" DisplayName="If Should Create Blank Space Password" sap:VirtualizedContainerService.HintSize="508,216" sap2010:WorkflowViewState.IdRef="If_10">
                      <If.Then>
                        <Assign DisplayName="Assign Password Value (Blank Space)" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_32">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Object">[SingleUserValues("CredentialPassword")]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[AssetPerRobotValues("Password").ToString]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </If.Then>
                      <If.Else>
                        <Throw DisplayName="Throw (Credential Asset with Empty Password)" Exception="[New Exception(in_Config(&quot;MigrateCredentialWithoutPassword&quot;))]" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Throw_15" />
                      </If.Else>
                    </If>
                  </If.Then>
                  <If.Else>
                    <Assign DisplayName="Assign Password Value" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_29">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Object">[SingleUserValues("CredentialPassword")]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[AssetPerRobotValues("Password").ToString]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </If.Else>
                </If>
              </Sequence>
            </Switch>
            <AddToCollection x:TypeArguments="scg:Dictionary(x:String, x:Object)" Collection="[UsersValues]" DisplayName="Add To Collection (Per Robot/User Values)" sap:VirtualizedContainerService.HintSize="898,22" sap2010:WorkflowViewState.IdRef="AddToCollection`1_1" Item="[SingleUserValues]" />
          </Sequence>
        </ActivityAction>
      </ui:ForEach.Body>
    </ui:ForEach>
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke CreateAssetPerRobotUserRequest Workflow" sap:VirtualizedContainerService.HintSize="976.666666666667,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Entities\Assets\CreateAssetPerRobotUserRequest.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:Int64" x:Key="in_OUFolderID">[ModernFolderID]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_AssetName">[AssetName]</InArgument>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_AssetType">[Type]</InArgument>
        <OutArgument x:TypeArguments="x:Int64" x:Key="out_AssetID">[AssetID]</OutArgument>
        <InArgument x:TypeArguments="x:String" x:Key="in_AssetScope">[Scope]</InArgument>
        <InArgument x:TypeArguments="scg:List(scg:Dictionary(x:String, x:Object))" x:Key="in_RobotUsersValues">[UsersValues]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
  </Sequence>
</Activity>