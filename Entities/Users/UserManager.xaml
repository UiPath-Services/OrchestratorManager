<Activity mc:Ignorable="sap sap2010" x:Class="UserManager" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:njl="clr-namespace:Newtonsoft.Json.Linq;assembly=Newtonsoft.Json" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, ui:GenericValue))" />
    <x:Property Name="in_UserOperation" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1454.66666666667,2504</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>AssetManager_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="35">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>System.Dynamic</x:String>
      <x:String>System.Collections.Specialized</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="52">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Plugin.Workflow</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Decide what operation should be performed on Users." DisplayName="User Manager" sap:VirtualizedContainerService.HintSize="608,2439.33333333333" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="ui:WorkbookApplication" Name="OpenWorkbook" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:ExcelApplicationScope Password="{x:Null}" CreateNewFile="False" DisplayName="Excel Application Scope (User Manager)" sap:VirtualizedContainerService.HintSize="566,125.333333333333" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_9" InstanceCachePeriod="3000" Workbook="[OpenWorkbook]" WorkbookPath="[String.Format(&quot;{0}\{1}&quot;, in_Config(&quot;EntitiesWorkbooksFolderPath&quot;), in_Config(&quot;UserConfigFilePath&quot;))]">
      <ui:ExcelApplicationScope.Body>
        <ActivityAction x:TypeArguments="ui:WorkbookApplication">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
          </ActivityAction.Argument>
        </ActivityAction>
      </ui:ExcelApplicationScope.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ExcelApplicationScope>
    <Switch x:TypeArguments="x:String" DisplayName="Switch (User Operation)" Expression="[in_UserOperation.ToLowerInvariant]" sap:VirtualizedContainerService.HintSize="566,2151.33333333333" sap2010:WorkflowViewState.IdRef="Switch`1_1">
      <Switch.Default>
        <Sequence DisplayName="Unsupported Operation" sap:VirtualizedContainerService.HintSize="376,285.333333333333" sap2010:WorkflowViewState.IdRef="Sequence_12">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message (Unsupported Operation)" sap:VirtualizedContainerService.HintSize="334,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_16" Level="Error" Message="[in_Config(&quot;UnsupportedOperation&quot;)]" />
          <ui:MessageBox ChosenButton="{x:Null}" Caption="[in_Config(&quot;ErrorMessageBoxTitle&quot;)]" DisplayName="Message Box (Unsupported Operation)" sap:VirtualizedContainerService.HintSize="334,58.6666666666667" sap2010:WorkflowViewState.IdRef="MessageBox_1" Text="[in_Config(&quot;UnsupportedOperation&quot;)]" />
        </Sequence>
      </Switch.Default>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Sequence x:Key="get" sap2010:Annotation.AnnotationText="It is not necessary to check for numerous requests since the Get operation only does a constant number of requests." DisplayName="Get" sap:VirtualizedContainerService.HintSize="476,1178.66666666667" sap2010:WorkflowViewState.IdRef="Sequence_8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:LogMessage DisplayName="Log Message (Get)" sap:VirtualizedContainerService.HintSize="434,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_10" Level="Trace" Message="[String.Format(&quot;{0}: {1} - {2}: {3}&quot;, in_Config(&quot;FormEntityLabel&quot;), in_Config(&quot;FormUserOption&quot;), in_Config(&quot;FormOperationLabel&quot;), in_Config(&quot;GetOperationName&quot;))]" />
        <ui:ExcelApplicationScope Password="{x:Null}" WorkbookPath="{x:Null}" sap2010:Annotation.AnnotationText="Clear previously written asset data and write new data about users." CreateNewFile="False" DisplayName="Excel Application Scope (Get Users)" ExistingWorkbook="[OpenWorkbook]" sap:VirtualizedContainerService.HintSize="434,906.666666666667" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_12" InstanceCachePeriod="3000" Visible="False">
          <ui:ExcelApplicationScope.Body>
            <ActivityAction x:TypeArguments="ui:WorkbookApplication">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
              </ActivityAction.Argument>
              <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="376,767.333333333333" sap2010:WorkflowViewState.IdRef="Sequence_14">
                <Sequence.Variables>
                  <Variable x:TypeArguments="sd:DataTable" Name="PreviousUsers" />
                  <Variable x:TypeArguments="sd:DataTable" Name="UsersData" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:ExcelReadRange AddHeaders="True" DataTable="[PreviousUsers]" DisplayName="Read Range (Previously Listed Users)" sap:VirtualizedContainerService.HintSize="334,58.6666666666667" sap2010:WorkflowViewState.IdRef="ExcelReadRange_9" SheetName="[in_Config(&quot;GetOperationName&quot;)]">
                  <ui:ExcelReadRange.Range>
                    <InArgument x:TypeArguments="x:String">
                      <Literal x:TypeArguments="x:String" Value="" />
                    </InArgument>
                  </ui:ExcelReadRange.Range>
                </ui:ExcelReadRange>
                <ui:ExcelWriteCell sap2010:Annotation.AnnotationText="Math.Max() prevents clearing the header of the table." Cell="[&quot;A2:Z&quot;+Math.Max(1+PreviousUsers.Rows.Count, 2).ToString]" DisplayName="Write Cell (Clear Previously Listed Users)" sap:VirtualizedContainerService.HintSize="334,117.333333333333" sap2010:WorkflowViewState.IdRef="ExcelWriteCell_1" SheetName="[in_Config(&quot;GetOperationName&quot;)]">
                  <ui:ExcelWriteCell.Text>
                    <InArgument x:TypeArguments="x:String">
                      <Literal x:TypeArguments="x:String" Value="" />
                    </InArgument>
                  </ui:ExcelWriteCell.Text>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:ExcelWriteCell>
                <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Make request after clearing sheet to prevent users from using old data." DisplayName="Invoke GetUsersData Workflow (Get Users)" sap:VirtualizedContainerService.HintSize="334,132" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_31" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Entities/Users/GetUsersData.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                    <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_UsersData">[UsersData]</OutArgument>
                    <InArgument x:TypeArguments="s:Int64[]" x:Key="in_FilterIDs">[{}]</InArgument>
                    <InArgument x:TypeArguments="s:String[]" x:Key="in_FilterNames">[{}]</InArgument>
                    <InArgument x:TypeArguments="x:Boolean" x:Key="in_AssignPrimaryKey">False</InArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:InvokeWorkflowFile>
                <ui:FilterDataTable sap2010:Annotation.AnnotationText="For compatibility reasons, remove columns that are only present in newer Orchestrator versions.&#xA;Also remvove " DataTable="[UsersData]" DisplayName="Filter Data Table (Users Data)" FilterRowsMode="Remove" sap:VirtualizedContainerService.HintSize="334,120.666666666667" sap2010:WorkflowViewState.IdRef="FilterDataTable_1" OutputDataTable="[UsersData]" SelectColumnsMode="Remove">
                  <ui:FilterDataTable.Filters>
                    <scg:List x:TypeArguments="ui:FilterOperationArgument" Capacity="4">
                      <ui:FilterOperationArgument BooleanOperator="And" Operator="EQ">
                        <ui:FilterOperationArgument.Column>
                          <InArgument x:TypeArguments="x:String">["Type"]</InArgument>
                        </ui:FilterOperationArgument.Column>
                        <ui:FilterOperationArgument.Operand>
                          <InArgument x:TypeArguments="x:String">["Robot"]</InArgument>
                        </ui:FilterOperationArgument.Operand>
                      </ui:FilterOperationArgument>
                    </scg:List>
                  </ui:FilterDataTable.Filters>
                  <ui:FilterDataTable.SelectColumns>
                    <scg:List x:TypeArguments="InArgument" Capacity="8">
                      <InArgument x:TypeArguments="x:String">["ARUserName"]</InArgument>
                      <InArgument x:TypeArguments="x:String">["ARType"]</InArgument>
                      <InArgument x:TypeArguments="x:String">["ARExecutionSettings"]</InArgument>
                      <InArgument x:TypeArguments="x:String">["URUserName"]</InArgument>
                      <InArgument x:TypeArguments="x:String">["URExecutionSettings"]</InArgument>
                      <InArgument x:TypeArguments="x:String">["Domain"]</InArgument>
                    </scg:List>
                  </ui:FilterDataTable.SelectColumns>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:FilterDataTable>
                <ui:ExcelWriteRange AddHeaders="False" DataTable="[UsersData]" DisplayName="Write Range (Users Details)" sap:VirtualizedContainerService.HintSize="334,86.6666666666667" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_1" SheetName="[in_Config(&quot;GetOperationName&quot;)]" StartingCell="A2" />
              </Sequence>
            </ActivityAction>
          </ui:ExcelApplicationScope.Body>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:ExcelApplicationScope>
      </Sequence>
      <Sequence x:Key="create" DisplayName="Create" sap:VirtualizedContainerService.HintSize="200,69.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_9">
        <Sequence.Variables>
          <Variable x:TypeArguments="sd:DataTable" Name="UsersDetails" />
          <Variable x:TypeArguments="sd:DataTable" Name="RolesData" />
          <Variable x:TypeArguments="sd:DataTable" Name="OUsData" />
          <Variable x:TypeArguments="sd:DataTable" Name="UsersData" />
          <Variable x:TypeArguments="sd:DataRow[]" Name="UnprocessedUsersDetails" />
          <Variable x:TypeArguments="s:String[]" Name="ColumnNames">
            <Variable.Default>
              <mva:VisualBasicValue x:TypeArguments="s:String[]" ExpressionText="New String() {&#xD;&#xA;  &quot;Username&quot;,&#xD;&#xA;  &quot;Name&quot;,&#xD;&#xA;  &quot;Surname&quot;,&#xD;&#xA;  &quot;Email&quot;,&#xD;&#xA;  &quot;OUsNames&quot;,&#xD;&#xA;  &quot;Roles&quot;,&#xD;&#xA;  &quot;Password&quot;,&#xD;&#xA;  &quot;MayHaveUserSession&quot;,&#xD;&#xA;  &quot;DomainUserNameAR&quot;,&#xD;&#xA;  &quot;LicenseType&quot;,&#xD;&#xA;  &quot;MayHavePersonalWorkspace&quot;,&#xD;&#xA;  &quot;IsExternalLicensed&quot;,&#xD;&#xA;  &quot;DomainUserNameUR&quot;,&#xD;&#xA;  &quot;PasswordUR&quot;,&#xD;&#xA;  &quot;LimitConcurrentExecution&quot;,&#xD;&#xA;  &quot;TracingLevel&quot;,&#xD;&#xA;  &quot;StudioNotifyServer&quot;,&#xD;&#xA;  &quot;LoginToConsole&quot;,&#xD;&#xA;  &quot;ResolutionWidth&quot;,&#xD;&#xA;  &quot;ResolutionHeight&quot;,&#xD;&#xA;  &quot;ResolutionDepth&quot;,&#xD;&#xA;  &quot;FontSmoothing&quot;,&#xD;&#xA;  &quot;AutoDownloadProcess&quot;,&#xD;&#xA;  &quot;ID&quot;,&#xD;&#xA;  &quot;Result&quot;&#xD;&#xA;}" />
            </Variable.Default>
          </Variable>
        </Sequence.Variables>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:LogMessage DisplayName="Log Message (Create User)" sap:VirtualizedContainerService.HintSize="567.333333333333,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_11" Level="Trace" Message="[String.Format(&quot;{0}: {1} - {2}: {3}&quot;, in_Config(&quot;FormEntityLabel&quot;), in_Config(&quot;FormUserOption&quot;), in_Config(&quot;FormOperationLabel&quot;), in_Config(&quot;CreateOperationName&quot;))]" />
        <ui:ExcelApplicationScope Password="{x:Null}" WorkbookPath="{x:Null}" CreateNewFile="False" DisplayName="Excel Application Scope (Create User)" ExistingWorkbook="[OpenWorkbook]" sap:VirtualizedContainerService.HintSize="567.333333333333,667.333333333333" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_8" InstanceCachePeriod="3000" Visible="False">
          <ui:ExcelApplicationScope.Body>
            <ActivityAction x:TypeArguments="ui:WorkbookApplication">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
              </ActivityAction.Argument>
              <Sequence sap2010:Annotation.AnnotationText="The names of the original columns from the sheet depend on the used language, so rename them according to the same names used by the Get operation for easier understanding and manipulation by column name instead of column index." DisplayName="Get Data and Rename Columns (Create User)" sap:VirtualizedContainerService.HintSize="382.666666666667,558.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_21">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:Int32" Name="i" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:ExcelReadRange AddHeaders="True" DataTable="[UsersDetails]" DisplayName="Read Range (Create User)" sap:VirtualizedContainerService.HintSize="340.666666666667,58.6666666666667" sap2010:WorkflowViewState.IdRef="ExcelReadRange_6" SheetName="[in_Config(&quot;CreateOperationName&quot;)]" UseFilter="True">
                  <ui:ExcelReadRange.Range>
                    <InArgument x:TypeArguments="x:String">
                      <Literal x:TypeArguments="x:String" Value="" />
                    </InArgument>
                  </ui:ExcelReadRange.Range>
                </ui:ExcelReadRange>
                <ui:ForEach x:TypeArguments="x:String" CurrentIndex="[i]" DisplayName="Rename Columns (Create User)" sap:VirtualizedContainerService.HintSize="340.666666666667,289.333333333333" sap2010:WorkflowViewState.IdRef="ForEach`1_6" Values="[ColumnNames]">
                  <ui:ForEach.Body>
                    <ActivityAction x:TypeArguments="x:String">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="x:String" Name="ColumnName" />
                      </ActivityAction.Argument>
                      <Sequence DisplayName="Rename Each Column (Create User)" sap:VirtualizedContainerService.HintSize="304,154" sap2010:WorkflowViewState.IdRef="Sequence_26">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign DisplayName="Assign ColumnName (Create User)" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_36">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[UsersDetails.Columns(i).ColumnName]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[ColumnName]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </ActivityAction>
                  </ui:ForEach.Body>
                </ui:ForEach>
              </Sequence>
            </ActivityAction>
          </ui:ExcelApplicationScope.Body>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:ExcelApplicationScope>
        <Assign sap2010:Annotation.AnnotationText="Select only rows that do not have a value in the Result column, but have at least a value in any other column." DisplayName="Assign UnprocessedUsersDetails (Create User)" sap:VirtualizedContainerService.HintSize="567.333333333333,124" sap2010:WorkflowViewState.IdRef="Assign_1">
          <Assign.To>
            <OutArgument x:TypeArguments="sd:DataRow[]">[UnprocessedUsersDetails]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="sd:DataRow[]">[UsersDetails.AsEnumerable().Where(Function(Row) String.IsNullOrWhiteSpace(Row("Result").ToString) AndAlso Row.ItemArray.Any(Function(RowField) Not String.IsNullOrWhiteSpace(RowField.ToString))).ToArray()]</InArgument>
          </Assign.Value>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Assign>
        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke ConfirmNumerousRequests Workflow (Create User)" sap:VirtualizedContainerService.HintSize="567.333333333333,114" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_18" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Common/ConfirmNumerousRequests.xaml">
          <ui:InvokeWorkflowFile.Arguments>
            <InArgument x:TypeArguments="x:Int32" x:Key="in_PlannedNumberOfRequests">[UnprocessedUsersDetails.Count()]</InArgument>
            <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
          </ui:InvokeWorkflowFile.Arguments>
        </ui:InvokeWorkflowFile>
        <If Condition="[UnprocessedUsersDetails.Count() &gt; 0]" DisplayName="If There are Rows to Process (Create User)" sap:VirtualizedContainerService.HintSize="567.333333333333,662" sap2010:WorkflowViewState.IdRef="If_9">
          <If.Then>
            <Sequence sap2010:Annotation.AnnotationText="Get current data beforehand for confirmation purposes and to reduce the number of requests." DisplayName="Get Data for Shared Use Among Rows (Create User)" sap:VirtualizedContainerService.HintSize="421.333333333333,508" sap2010:WorkflowViewState.IdRef="Sequence_13">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke GetOrganizationUnitsData Workflow (Create User)" sap:VirtualizedContainerService.HintSize="379.333333333333,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_27" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Entities\OrganizationUnits\GetOrganizationUnitsData.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                  <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_OUsData">[OUsData]</OutArgument>
                  <InArgument x:TypeArguments="s:Int64[]" x:Key="in_FilterIDs">[{}]</InArgument>
                  <InArgument x:TypeArguments="s:String[]" x:Key="in_FilterNames">[{}]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke GetRolesData Workflow (Create User)" sap:VirtualizedContainerService.HintSize="379.333333333333,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_28" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Entities\Roles\GetRolesData.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                  <InArgument x:TypeArguments="s:Int64[]" x:Key="in_FilterIDs">[{}]</InArgument>
                  <InArgument x:TypeArguments="s:String[]" x:Key="in_FilterNames">[{}]</InArgument>
                  <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_RolesData">[RolesData]</OutArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Consider only Users specified in the sheet." DisplayName="Invoke GetUsersData Workflow (Create User)" sap:VirtualizedContainerService.HintSize="379.333333333333,117.333333333333" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_32" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Entities/Users/GetUsersData.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                  <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_UsersData">[UsersData]</OutArgument>
                  <InArgument x:TypeArguments="s:Int64[]" x:Key="in_FilterIDs">[{}]</InArgument>
                  <InArgument x:TypeArguments="s:String[]" x:Key="in_FilterNames">[UnprocessedUsersDetails.Where(Function(Row) Not String.IsNullOrWhiteSpace(Row("Username").ToString)).Select(Function(Row) Row("Username").ToString).Distinct().ToArray]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:InvokeWorkflowFile>
            </Sequence>
          </If.Then>
        </If>
        <ui:ForEach x:TypeArguments="sd:DataRow" CurrentIndex="{x:Null}" DisplayName="For Each Row (Create User)" sap:VirtualizedContainerService.HintSize="567.333333333333,225.333333333333" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[UnprocessedUsersDetails]">
          <ui:ForEach.Body>
            <ActivityAction x:TypeArguments="sd:DataRow">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="sd:DataRow" Name="UserDetails" />
              </ActivityAction.Argument>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke CreateUser workflow" sap:VirtualizedContainerService.HintSize="334,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_19" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Entities/Users/CreateUser.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="ui:WorkbookApplication" x:Key="in_OpenedWorkbook">[OpenWorkbook]</InArgument>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_Surname">[UserDetails("Surname").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_Email">[UserDetails("Email").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="in_UserIndex">[UsersDetails.Rows.IndexOf(UserDetails)]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_Password">[UserDetails("Password").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_Name">[UserDetails("Name").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_UserName">[UserDetails("Username").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_Roles">[UserDetails("Roles").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_OUsNames">[UserDetails("OUsNames").ToString]</InArgument>
                  <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_UsersData">[UsersData]</InOutArgument>
                  <InArgument x:TypeArguments="sd:DataTable" x:Key="in_OUsData">[OUsData]</InArgument>
                  <InArgument x:TypeArguments="sd:DataTable" x:Key="in_RolesData">[RolesData]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_DomainUserNameAR">[UserDetails("DomainUserNameAR").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_DomainUserNameUR">[UserDetails("DomainUserNameUR").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_PasswordUR">[UserDetails("PasswordUR").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_LicenseType">[UserDetails("LicenseType").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="in_MayHavePersonalWorkspace">[UserDetails("MayHavePersonalWorkspace").ToString = "True"]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsExternalLicensed">[UserDetails("IsExternalLicensed").ToString = "True"]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="in_LimitConcurrentExecution">[UserDetails("LimitConcurrentExecution").ToString = "True"]</InArgument>
                  <InArgument x:TypeArguments="s:String[]" x:Key="in_ColumnNames">[ColumnNames]</InArgument>
                  <InArgument x:TypeArguments="sd:DataRow" x:Key="in_UserDetails">[UserDetails]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
            </ActivityAction>
          </ui:ForEach.Body>
        </ui:ForEach>
      </Sequence>
      <Sequence x:Key="edit" DisplayName="Edit" sap:VirtualizedContainerService.HintSize="526,1843.33333333333" sap2010:WorkflowViewState.IdRef="Sequence_7">
        <Sequence.Variables>
          <Variable x:TypeArguments="sd:DataTable" Name="UsersDetails" />
          <Variable x:TypeArguments="sd:DataRow[]" Name="UnprocessedUsersDetails" />
          <Variable x:TypeArguments="s:String[]" Name="ColumnNames">
            <Variable.Default>
              <mva:VisualBasicValue x:TypeArguments="s:String[]" ExpressionText="New String() {&#xD;&#xA;  &quot;ID&quot;,&#xD;&#xA;  &quot;Name&quot;,&#xD;&#xA;  &quot;Surname&quot;,&#xD;&#xA;  &quot;Email&quot;,&#xD;&#xA;  &quot;Status&quot;,&#xD;&#xA;  &quot;Password&quot;,&#xD;&#xA;  &quot;MayHaveUserSession&quot;,&#xD;&#xA;  &quot;DomainUserNameAR&quot;,&#xD;&#xA;  &quot;LicenseType&quot;,&#xD;&#xA;  &quot;MayHavePersonalWorkspace&quot;,&#xD;&#xA;  &quot;IsExternalLicensed&quot;,&#xD;&#xA;  &quot;DomainUserNameUR&quot;,&#xD;&#xA;  &quot;PasswordUR&quot;,&#xD;&#xA;  &quot;LimitConcurrentExecution&quot;,&#xD;&#xA;  &quot;TracingLevel&quot;,&#xD;&#xA;  &quot;StudioNotifyServer&quot;,&#xD;&#xA;  &quot;LoginToConsole&quot;,&#xD;&#xA;  &quot;ResolutionWidth&quot;,&#xD;&#xA;  &quot;ResolutionHeight&quot;,&#xD;&#xA;  &quot;ResolutionDepth&quot;,&#xD;&#xA;  &quot;FontSmoothing&quot;,&#xD;&#xA;  &quot;AutoDownloadProcess&quot;,&#xD;&#xA;  &quot;Result&quot;&#xD;&#xA;}" />
            </Variable.Default>
          </Variable>
          <Variable x:TypeArguments="njl:JObject" Name="GetUsersResultObject" />
        </Sequence.Variables>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:LogMessage DisplayName="Log Message (Edit)" sap:VirtualizedContainerService.HintSize="484,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_12" Level="Trace" Message="[String.Format(&quot;{0}: {1} - {2}: {3}&quot;, in_Config(&quot;FormEntityLabel&quot;), in_Config(&quot;FormUserOption&quot;), in_Config(&quot;FormOperationLabel&quot;), in_Config(&quot;EditOperationName&quot;))]" />
        <ui:ExcelApplicationScope Password="{x:Null}" WorkbookPath="{x:Null}" CreateNewFile="False" DisplayName="Excel Application Scope (Edit User)" ExistingWorkbook="[OpenWorkbook]" sap:VirtualizedContainerService.HintSize="484,667.333333333333" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_6" InstanceCachePeriod="3000" Visible="False">
          <ui:ExcelApplicationScope.Body>
            <ActivityAction x:TypeArguments="ui:WorkbookApplication">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
              </ActivityAction.Argument>
              <Sequence sap2010:Annotation.AnnotationText="The names of the original columns from the sheet depend on the used language, so rename them according to the same names used by the Get operation for easier understanding and manipulation by column name instead of column index." DisplayName="Get Data and Rename Columns (Edit User)" sap:VirtualizedContainerService.HintSize="382.666666666667,558.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_22">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:Int32" Name="i" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:ExcelReadRange AddHeaders="True" DataTable="[UsersDetails]" DisplayName="Read Range (Edit User)" sap:VirtualizedContainerService.HintSize="340.666666666667,58.6666666666667" sap2010:WorkflowViewState.IdRef="ExcelReadRange_5" SheetName="[in_Config(&quot;EditOperationName&quot;)]" UseFilter="True">
                  <ui:ExcelReadRange.Range>
                    <InArgument x:TypeArguments="x:String">
                      <Literal x:TypeArguments="x:String" Value="" />
                    </InArgument>
                  </ui:ExcelReadRange.Range>
                </ui:ExcelReadRange>
                <ui:ForEach x:TypeArguments="x:String" CurrentIndex="[i]" DisplayName="Rename Columns (Edit User)" sap:VirtualizedContainerService.HintSize="340.666666666667,289.333333333333" sap2010:WorkflowViewState.IdRef="ForEach`1_7" Values="[ColumnNames]">
                  <ui:ForEach.Body>
                    <ActivityAction x:TypeArguments="x:String">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="x:String" Name="ColumnName" />
                      </ActivityAction.Argument>
                      <Sequence DisplayName="Rename Each Column (Edit User)" sap:VirtualizedContainerService.HintSize="304,154" sap2010:WorkflowViewState.IdRef="Sequence_27">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign DisplayName="Assign ColumnName (Edit User)" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_38">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[UsersDetails.Columns(i).ColumnName]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[ColumnName]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </ActivityAction>
                  </ui:ForEach.Body>
                </ui:ForEach>
              </Sequence>
            </ActivityAction>
          </ui:ExcelApplicationScope.Body>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:ExcelApplicationScope>
        <Assign sap2010:Annotation.AnnotationText="Select only rows that do not have a value in the Result column, but have at least a value in any other column." DisplayName="Assign UnprocessedUsersDetails (Edit User)" sap:VirtualizedContainerService.HintSize="484,124" sap2010:WorkflowViewState.IdRef="Assign_2">
          <Assign.To>
            <OutArgument x:TypeArguments="sd:DataRow[]">[UnprocessedUsersDetails]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="sd:DataRow[]">[UsersDetails.AsEnumerable().Where(Function(Row) String.IsNullOrWhiteSpace(Row("Result").ToString) AndAlso Row.ItemArray.Any(Function(RowField) Not String.IsNullOrWhiteSpace(RowField.ToString))).ToArray()]</InArgument>
          </Assign.Value>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Assign>
        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke ConfirmNumerousRequests Workflow (Edit User)" sap:VirtualizedContainerService.HintSize="484,114" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_15" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Common/ConfirmNumerousRequests.xaml">
          <ui:InvokeWorkflowFile.Arguments>
            <InArgument x:TypeArguments="x:Int32" x:Key="in_PlannedNumberOfRequests">[UnprocessedUsersDetails.Count()]</InArgument>
            <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
          </ui:InvokeWorkflowFile.Arguments>
        </ui:InvokeWorkflowFile>
        <If Condition="[UnprocessedUsersDetails.Count() &gt; 0]" DisplayName="If There are Rows to Process (Edit User)" sap:VirtualizedContainerService.HintSize="484,298.666666666667" sap2010:WorkflowViewState.IdRef="If_14">
          <If.Then>
            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke MakeGetRequests Workflow (Edit User)" sap:VirtualizedContainerService.HintSize="334,114" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_50" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Common\MakeGetRequests.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                <InArgument x:TypeArguments="s:Int64[]" x:Key="in_FilterIDs">[UnprocessedUsersDetails.Where(Function(Row) Not String.IsNullOrWhiteSpace(Row("ID").ToString)).Select(Function(Row) Convert.toInt64(Row("ID").ToString)).Distinct().ToArray]</InArgument>
                <InArgument x:TypeArguments="s:String[]" x:Key="in_FilterNames">[{}]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_NameFilterField">UserName</InArgument>
                <OutArgument x:TypeArguments="njl:JObject" x:Key="out_ResultObject">[GetUsersResultObject]</OutArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_Endpoint">[String.Format("{0}/odata/Users?$orderby=UserName&amp;$expand=OrganizationUnits", in_Config("OrchestratorURL"))]</InArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
          </If.Then>
        </If>
        <ui:ForEach x:TypeArguments="sd:DataRow" CurrentIndex="{x:Null}" DisplayName="For Each Row (Edit User)" sap:VirtualizedContainerService.HintSize="484,252.666666666667" sap2010:WorkflowViewState.IdRef="ForEach`1_2" Values="[UnprocessedUsersDetails]">
          <ui:ForEach.Body>
            <ActivityAction x:TypeArguments="sd:DataRow">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="sd:DataRow" Name="UserDetails" />
              </ActivityAction.Argument>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke EditUser Workflow" sap:VirtualizedContainerService.HintSize="334,114" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_16" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Entities/Users/EditUser.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="ui:WorkbookApplication" x:Key="in_OpenWorkbook">[OpenWorkbook]</InArgument>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="in_UserIndex">[UsersDetails.Rows.IndexOf(UserDetails)]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_Name">[UserDetails("Name").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_Surname">[UserDetails("Surname").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_Email">[UserDetails("Email").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_Status">[UserDetails("Status").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_Password">[UserDetails("Password").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_ID">[UserDetails("ID").ToString]</InArgument>
                  <InArgument x:TypeArguments="njl:JObject" x:Key="in_UserDto">[CType(GetUsersResultObject("value").Where(Function(user) user("Id").ToString = UserDetails("ID").ToString).First(), JObject)]</InArgument>
                  <InArgument x:TypeArguments="s:String[]" x:Key="in_ColumnNames">[ColumnNames]</InArgument>
                  <InArgument x:TypeArguments="sd:DataRow" x:Key="in_UserDetails">[UserDetails]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
            </ActivityAction>
          </ui:ForEach.Body>
        </ui:ForEach>
      </Sequence>
      <Sequence x:Key="delete" DisplayName="Delete " sap:VirtualizedContainerService.HintSize="526,1194.66666666667" sap2010:WorkflowViewState.IdRef="Sequence_6">
        <Sequence.Variables>
          <Variable x:TypeArguments="sd:DataTable" Name="UsersDetails" />
          <Variable x:TypeArguments="sd:DataTable" Name="UsersData" />
          <Variable x:TypeArguments="sd:DataRow[]" Name="UnprocessedUsersDetails" />
        </Sequence.Variables>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:LogMessage DisplayName="Log Message (Delete User)" sap:VirtualizedContainerService.HintSize="484,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_13" Level="Trace" Message="[String.Format(&quot;{0}: {1} - {2}: {3}&quot;, in_Config(&quot;FormEntityLabel&quot;), in_Config(&quot;FormUserOption&quot;), in_Config(&quot;FormOperationLabel&quot;), in_Config(&quot;DeleteOperationName&quot;))]" />
        <ui:ExcelApplicationScope Password="{x:Null}" WorkbookPath="{x:Null}" CreateNewFile="False" DisplayName="Excel Application Scope (Delete User)" ExistingWorkbook="[OpenWorkbook]" sap:VirtualizedContainerService.HintSize="484,52.6666666666667" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_5" InstanceCachePeriod="3000" Visible="False">
          <ui:ExcelApplicationScope.Body>
            <ActivityAction x:TypeArguments="ui:WorkbookApplication">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
              </ActivityAction.Argument>
              <Sequence sap2010:Annotation.AnnotationText="The names of the original columns from the sheet depend on the used language, so rename them according to the same names used by the Get operation for easier understanding and manipulation by column name instead of column index." DisplayName="Get Data and Rename Columns (Delete User)" sap:VirtualizedContainerService.HintSize="376,522.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_23">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:ExcelReadRange AddHeaders="True" DataTable="[UsersDetails]" DisplayName="Read Range (Delete User)" sap:VirtualizedContainerService.HintSize="334,59" sap2010:WorkflowViewState.IdRef="ExcelReadRange_4" SheetName="[in_Config(&quot;DeleteOperationName&quot;)]" UseFilter="True">
                  <ui:ExcelReadRange.Range>
                    <InArgument x:TypeArguments="x:String">
                      <Literal x:TypeArguments="x:String" Value="" />
                    </InArgument>
                  </ui:ExcelReadRange.Range>
                </ui:ExcelReadRange>
                <Assign DisplayName="Assign ID Column (Delete User)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_25">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[UsersDetails.Columns(0).ColumnName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">ID</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign Username Column (Delete User)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_26">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[UsersDetails.Columns(1).ColumnName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">Username</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign Result Column (Delete User)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_27">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[UsersDetails.Columns(2).ColumnName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">Result</InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
            </ActivityAction>
          </ui:ExcelApplicationScope.Body>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:ExcelApplicationScope>
        <Assign sap2010:Annotation.AnnotationText="Select only rows that do not have a value in the Result column, but have at least a value in any other column." DisplayName="Assign UnprocessedUsersDetails (Delete User)" sap:VirtualizedContainerService.HintSize="484,124" sap2010:WorkflowViewState.IdRef="Assign_3">
          <Assign.To>
            <OutArgument x:TypeArguments="sd:DataRow[]">[UnprocessedUsersDetails]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="sd:DataRow[]">[UsersDetails.AsEnumerable().Where(Function(Row) String.IsNullOrWhiteSpace(Row("Result").ToString) AndAlso Row.ItemArray.Any(Function(RowField) Not String.IsNullOrWhiteSpace(RowField.ToString))).ToArray()]</InArgument>
          </Assign.Value>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Assign>
        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke ConfirmNumerousRequests workflow (Delete User)" sap:VirtualizedContainerService.HintSize="484,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_13" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Common/ConfirmNumerousRequests.xaml">
          <ui:InvokeWorkflowFile.Arguments>
            <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
            <InArgument x:TypeArguments="x:Int32" x:Key="in_PlannedNumberOfRequests">[UnprocessedUsersDetails.Count()]</InArgument>
          </ui:InvokeWorkflowFile.Arguments>
        </ui:InvokeWorkflowFile>
        <If Condition="[UnprocessedUsersDetails.Count() &gt; 0]" DisplayName="If There are Rows to Process (Delete User)" sap:VirtualizedContainerService.HintSize="484,319.333333333333" sap2010:WorkflowViewState.IdRef="If_11">
          <If.Then>
            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Get current data about Users to share data among rows and reduce the number of requests.&#xA;&#xA;Consider only Users specified in the sheet." DisplayName="Invoke GetUsersData Workflow (Delete User)" sap:VirtualizedContainerService.HintSize="334,165.333333333333" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_33" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Entities/Users/GetUsersData.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                <InArgument x:TypeArguments="s:Int64[]" x:Key="in_FilterIDs">[{}]</InArgument>
                <InArgument x:TypeArguments="s:String[]" x:Key="in_FilterNames">[UnprocessedUsersDetails.Where(Function(Row) Not String.IsNullOrWhiteSpace(Row("Username").ToString)).Select(Function(Row) Row("Username").ToString).Distinct().ToArray]</InArgument>
                <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_UsersData">[UsersData]</OutArgument>
              </ui:InvokeWorkflowFile.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeWorkflowFile>
          </If.Then>
        </If>
        <ui:ForEach x:TypeArguments="sd:DataRow" CurrentIndex="{x:Null}" DisplayName="For Each Row (Delete User)" sap:VirtualizedContainerService.HintSize="484,225.333333333333" sap2010:WorkflowViewState.IdRef="ForEach`1_3" Values="[UnprocessedUsersDetails]">
          <ui:ForEach.Body>
            <ActivityAction x:TypeArguments="sd:DataRow">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="sd:DataRow" Name="UserDetails" />
              </ActivityAction.Argument>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke DeleteUser workflow" sap:VirtualizedContainerService.HintSize="334,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_41" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Entities/Users/DeleteUser.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                  <InArgument x:TypeArguments="ui:WorkbookApplication" x:Key="in_OpenWorkbook">[OpenWorkbook]</InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="in_UserIndex">[UsersDetails.Rows.IndexOf(UserDetails)]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_ID">[UserDetails("ID").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_Username">[UserDetails("Username").ToString]</InArgument>
                  <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_UsersData">[UsersData]</InOutArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
            </ActivityAction>
          </ui:ForEach.Body>
        </ui:ForEach>
      </Sequence>
      <Sequence x:Key="addremoverole" DisplayName="Add/Remove User's Roles" sap:VirtualizedContainerService.HintSize="563.333333333333,1398" sap2010:WorkflowViewState.IdRef="Sequence_11">
        <Sequence.Variables>
          <Variable x:TypeArguments="sd:DataTable" Name="UsersDetails" />
          <Variable x:TypeArguments="sd:DataTable" Name="RolesData" />
          <Variable x:TypeArguments="sd:DataTable" Name="UsersData" />
          <Variable x:TypeArguments="sd:DataRow[]" Name="UnprocessedUsersDetails" />
        </Sequence.Variables>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:LogMessage DisplayName="Log Message (Add/remove User's Roles)" sap:VirtualizedContainerService.HintSize="521.333333333333,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_15" Level="Trace" Message="[String.Format(&quot;{0}: {1} - {2}: {3}&quot;, in_Config(&quot;FormEntityLabel&quot;), in_Config(&quot;FormUserOption&quot;), in_Config(&quot;FormOperationLabel&quot;), in_Config(&quot;AddRemoveUserRolesOperationName&quot;))]" />
        <ui:ExcelApplicationScope Password="{x:Null}" WorkbookPath="{x:Null}" CreateNewFile="False" DisplayName="Excel Application Scope (Add/Remove User's Roles)" ExistingWorkbook="[OpenWorkbook]" sap:VirtualizedContainerService.HintSize="521.333333333333,52.6666666666667" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_11" InstanceCachePeriod="3000" Visible="False">
          <ui:ExcelApplicationScope.Body>
            <ActivityAction x:TypeArguments="ui:WorkbookApplication">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
              </ActivityAction.Argument>
              <Sequence sap2010:Annotation.AnnotationText="The names of the original columns from the sheet depend on the used language, so rename them according to the same names used by the Get operation for easier understanding and manipulation by column name instead of column index." DisplayName="Get Data and Rename Columns (Add/Remove User's Roles)" sap:VirtualizedContainerService.HintSize="376,622.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_25">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:ExcelReadRange AddHeaders="True" DataTable="[UsersDetails]" DisplayName="Read Range (Add/Remove User's Roles)" sap:VirtualizedContainerService.HintSize="334,59" sap2010:WorkflowViewState.IdRef="ExcelReadRange_8" SheetName="[in_Config(&quot;AddRemoveUserRolesOperationName&quot;)]" UseFilter="True">
                  <ui:ExcelReadRange.Range>
                    <InArgument x:TypeArguments="x:String">
                      <Literal x:TypeArguments="x:String" Value="" />
                    </InArgument>
                  </ui:ExcelReadRange.Range>
                </ui:ExcelReadRange>
                <Assign DisplayName="Assign UserID Column (Add/Remove User's Roles)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_32">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[UsersDetails.Columns(0).ColumnName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">UserID</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign AddRolesNames Column (Add/Remove User's Roles)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_33">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[UsersDetails.Columns(1).ColumnName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">AddRolesNames</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign RemoveRolesNames Column (Add/Remove User's Roles)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_34">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[UsersDetails.Columns(2).ColumnName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">RemoveRolesNames</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign Result Column (Add/Remove User's Roles)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_35">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[UsersDetails.Columns(3).ColumnName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">Result</InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
            </ActivityAction>
          </ui:ExcelApplicationScope.Body>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:ExcelApplicationScope>
        <Assign sap2010:Annotation.AnnotationText="Select only rows that do not have a value in the Result column, but have at least a value in any other column." DisplayName="Assign UnprocessedUsersDetails (Add/Remove User's Roles)" sap:VirtualizedContainerService.HintSize="521.333333333333,124" sap2010:WorkflowViewState.IdRef="Assign_5">
          <Assign.To>
            <OutArgument x:TypeArguments="sd:DataRow[]">[UnprocessedUsersDetails]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="sd:DataRow[]">[UsersDetails.AsEnumerable().Where(Function(Row) String.IsNullOrWhiteSpace(Row("Result").ToString) AndAlso Row.ItemArray.Any(Function(RowField) Not String.IsNullOrWhiteSpace(RowField.ToString))).ToArray()]</InArgument>
          </Assign.Value>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Assign>
        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke ConfirmNumerousRequests Workflow (Add/Remove User's Roles)" sap:VirtualizedContainerService.HintSize="521.333333333333,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_23" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Common/ConfirmNumerousRequests.xaml">
          <ui:InvokeWorkflowFile.Arguments>
            <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
            <InArgument x:TypeArguments="x:Int32" x:Key="in_PlannedNumberOfRequests">[UsersDetails.Rows.Count()]</InArgument>
          </ui:InvokeWorkflowFile.Arguments>
        </ui:InvokeWorkflowFile>
        <If Condition="[UnprocessedUsersDetails.Count() &gt; 0]" DisplayName="If There are Rows to Process (Add/Remove User's Roles)" sap:VirtualizedContainerService.HintSize="521.333333333333,526.666666666667" sap2010:WorkflowViewState.IdRef="If_13">
          <If.Then>
            <Sequence sap2010:Annotation.AnnotationText="Get current data beforehand for confirmation purposes and to reduce the number of requests." DisplayName="Get Data for Shared Use Among Rows (Add/Remove User's Roles)" sap:VirtualizedContainerService.HintSize="376,379" sap2010:WorkflowViewState.IdRef="Sequence_20">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke GetRolesData Workflow (Add/Remove User's Roles)" sap:VirtualizedContainerService.HintSize="334,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_30" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Entities\Roles\GetRolesData.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                  <InArgument x:TypeArguments="s:Int64[]" x:Key="in_FilterIDs">[{}]</InArgument>
                  <InArgument x:TypeArguments="s:String[]" x:Key="in_FilterNames">[{}]</InArgument>
                  <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_RolesData">[RolesData]</OutArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Consider only Users specified in the sheet." DisplayName="Invoke GetUsersData Workflow (Add/Remove User's Roles)" sap:VirtualizedContainerService.HintSize="334,118" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_35" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Entities/Users/GetUsersData.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                  <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_UsersData">[UsersData]</OutArgument>
                  <InArgument x:TypeArguments="s:Int64[]" x:Key="in_FilterIDs">[UnprocessedUsersDetails.Where(Function(Row) Not String.IsNullOrWhiteSpace(Row("UserID").ToString)).Select(Function(Row) Convert.ToInt64(Row("UserID"))).Distinct().ToArray]</InArgument>
                  <InArgument x:TypeArguments="s:String[]" x:Key="in_FilterNames">[{}]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:InvokeWorkflowFile>
            </Sequence>
          </If.Then>
        </If>
        <ui:ForEach x:TypeArguments="sd:DataRow" CurrentIndex="{x:Null}" DisplayName="For Each Row (Add/Remove User's Roles)" sap:VirtualizedContainerService.HintSize="521,221" sap2010:WorkflowViewState.IdRef="ForEach`1_5" Values="[UnprocessedUsersDetails]">
          <ui:ForEach.Body>
            <ActivityAction x:TypeArguments="sd:DataRow">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="sd:DataRow" Name="UserDetails" />
              </ActivityAction.Argument>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke AddRemoveUserRoles Workflow" sap:VirtualizedContainerService.HintSize="334,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_25" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Entities/Users/AddRemoveUserRoles.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="ui:WorkbookApplication" x:Key="in_OpenWorkbook">[OpenWorkbook]</InArgument>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="in_UserIndex">[UsersDetails.Rows.IndexOf(UserDetails)]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_UserID">[UserDetails("UserID").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_AddRolesNames">[UserDetails("AddRolesNames").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_RemoveRolesNames">[UserDetails("RemoveRolesNames").ToString]</InArgument>
                  <InArgument x:TypeArguments="sd:DataTable" x:Key="in_UsersData">[UsersData]</InArgument>
                  <InArgument x:TypeArguments="sd:DataTable" x:Key="in_RolesData">[RolesData]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
            </ActivityAction>
          </ui:ForEach.Body>
        </ui:ForEach>
      </Sequence>
      <Sequence x:Key="addremoveou" DisplayName="Add/Remove User's Organization Units" sap:VirtualizedContainerService.HintSize="608,1398" sap2010:WorkflowViewState.IdRef="Sequence_10">
        <Sequence.Variables>
          <Variable x:TypeArguments="sd:DataTable" Name="UsersDetails" />
          <Variable x:TypeArguments="sd:DataTable" Name="OUsData" />
          <Variable x:TypeArguments="sd:DataTable" Name="UsersData" />
          <Variable x:TypeArguments="sd:DataRow[]" Name="UnprocessedUsersDetails" />
        </Sequence.Variables>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:LogMessage DisplayName="Log Message (Add/Remove User's Organization Units)" sap:VirtualizedContainerService.HintSize="566,94.6666666666667" sap2010:WorkflowViewState.IdRef="LogMessage_14" Level="Trace" Message="[String.Format(&quot;{0}: {1} - {2}: {3}&quot;, in_Config(&quot;FormEntityLabel&quot;), in_Config(&quot;FormUserOption&quot;), in_Config(&quot;FormOperationLabel&quot;), in_Config(&quot;AddRemoveUserOrganizationUnitsOperationName&quot;))]" />
        <ui:ExcelApplicationScope Password="{x:Null}" WorkbookPath="{x:Null}" CreateNewFile="False" DisplayName="Excel Application Scope (Add/Remove User's Organization Units)" ExistingWorkbook="[OpenWorkbook]" sap:VirtualizedContainerService.HintSize="566,52.6666666666667" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_10" InstanceCachePeriod="3000" Visible="False">
          <ui:ExcelApplicationScope.Body>
            <ActivityAction x:TypeArguments="ui:WorkbookApplication">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
              </ActivityAction.Argument>
              <Sequence sap2010:Annotation.AnnotationText="The names of the original columns from the sheet depend on the used language, so rename them according to the same names used by the Get operation for easier understanding and manipulation by column name instead of column index." DisplayName="Get Data and Rename Columns (Add/Remove User's Organization Units)" sap:VirtualizedContainerService.HintSize="376,622.666666666667" sap2010:WorkflowViewState.IdRef="Sequence_24">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:ExcelReadRange AddHeaders="True" DataTable="[UsersDetails]" DisplayName="Read Range (Add/Remove User's Organization Units List)" sap:VirtualizedContainerService.HintSize="334,59" sap2010:WorkflowViewState.IdRef="ExcelReadRange_7" SheetName="[in_Config(&quot;AddRemoveUserOrganizationUnitsOperationName&quot;)]" UseFilter="True">
                  <ui:ExcelReadRange.Range>
                    <InArgument x:TypeArguments="x:String">
                      <Literal x:TypeArguments="x:String" Value="" />
                    </InArgument>
                  </ui:ExcelReadRange.Range>
                </ui:ExcelReadRange>
                <Assign DisplayName="Assign UserID Column (Add/Remove User's Organization Units)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_28">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[UsersDetails.Columns(0).ColumnName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">UserID</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign AddOUsNames Column (Add/Remove User's Organization Units)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_29">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[UsersDetails.Columns(1).ColumnName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">AddOUsNames</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign RemoveOUsNames Column (Add/Remove User's Organization Units)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_30">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[UsersDetails.Columns(2).ColumnName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">RemoveOUsNames</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign Result Column (Add/Remove User's Organization Units)" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_31">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[UsersDetails.Columns(3).ColumnName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">Result</InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
            </ActivityAction>
          </ui:ExcelApplicationScope.Body>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:ExcelApplicationScope>
        <Assign sap2010:Annotation.AnnotationText="Select only rows that do not have a value in the Result column, but have at least a value in any other column." DisplayName="Assign UnprocessedUsersDetails (Add/Remove User's Organization Units)" sap:VirtualizedContainerService.HintSize="566,124" sap2010:WorkflowViewState.IdRef="Assign_4">
          <Assign.To>
            <OutArgument x:TypeArguments="sd:DataRow[]">[UnprocessedUsersDetails]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="sd:DataRow[]">[UsersDetails.AsEnumerable().Where(Function(Row) String.IsNullOrWhiteSpace(Row("Result").ToString) AndAlso Row.ItemArray.Any(Function(RowField) Not String.IsNullOrWhiteSpace(RowField.ToString))).ToArray()]</InArgument>
          </Assign.Value>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Assign>
        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke ConfirmNumerousRequests Workflow (Add/Remove User's Organization Units)" sap:VirtualizedContainerService.HintSize="566,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_20" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Common/ConfirmNumerousRequests.xaml">
          <ui:InvokeWorkflowFile.Arguments>
            <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
            <InArgument x:TypeArguments="x:Int32" x:Key="in_PlannedNumberOfRequests">[UnprocessedUsersDetails.Count()]</InArgument>
          </ui:InvokeWorkflowFile.Arguments>
        </ui:InvokeWorkflowFile>
        <If Condition="[UnprocessedUsersDetails.Count() &gt; 0]" DisplayName="If There are Rows to Process (Add/Remove User's Organization Units)" sap:VirtualizedContainerService.HintSize="566,526.666666666667" sap2010:WorkflowViewState.IdRef="If_12">
          <If.Then>
            <Sequence sap2010:Annotation.AnnotationText="Get current data beforehand for confirmation purposes and to reduce the number of requests." DisplayName="Get Data for Shared Use Among Rows (Add/Remove User's Organization Units)" sap:VirtualizedContainerService.HintSize="421,379" sap2010:WorkflowViewState.IdRef="Sequence_19">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke GetOrganizationUnitsData Workflow (Add/Remove User's Organization Unit)" sap:VirtualizedContainerService.HintSize="379,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_47" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Entities\OrganizationUnits\GetOrganizationUnitsData.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                  <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_OUsData">[OUsData]</OutArgument>
                  <InArgument x:TypeArguments="s:Int64[]" x:Key="in_FilterIDs">[{}]</InArgument>
                  <InArgument x:TypeArguments="s:String[]" x:Key="in_FilterNames">[{}]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Consider only Users specified in the sheet." DisplayName="Invoke GetUsersData Workflow (Add/Remove User's Organization Unit)" sap:VirtualizedContainerService.HintSize="379,118" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_48" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Entities/Users/GetUsersData.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                  <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_UsersData">[UsersData]</OutArgument>
                  <InArgument x:TypeArguments="s:Int64[]" x:Key="in_FilterIDs">[UnprocessedUsersDetails.Where(Function(Row) Not String.IsNullOrWhiteSpace(Row("UserID").ToString)).Select(Function(Row) Convert.ToInt64(Row("UserID"))).Distinct().ToArray]</InArgument>
                  <InArgument x:TypeArguments="s:String[]" x:Key="in_FilterNames">[{}]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:InvokeWorkflowFile>
            </Sequence>
          </If.Then>
        </If>
        <ui:ForEach x:TypeArguments="sd:DataRow" CurrentIndex="{x:Null}" DisplayName="For Each Row (Add/Remove User's Organization Units)" sap:VirtualizedContainerService.HintSize="566,221" sap2010:WorkflowViewState.IdRef="ForEach`1_4" Values="[UnprocessedUsersDetails]">
          <ui:ForEach.Body>
            <ActivityAction x:TypeArguments="sd:DataRow">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="sd:DataRow" Name="UserDetails" />
              </ActivityAction.Argument>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke AddRemoveUserOrganizationUnits Workflow" sap:VirtualizedContainerService.HintSize="369,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_22" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Entities/Users/AddRemoveUserOrganizationUnits.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="ui:WorkbookApplication" x:Key="in_OpenWorkbook">[OpenWorkbook]</InArgument>
                  <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[in_Config]</InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="in_UserIndex">[UsersDetails.Rows.IndexOf(UserDetails)]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_UserID">[UserDetails("UserID").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_AddOUsNames">[UserDetails("AddOUsNames").ToString]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="in_RemoveOUsNames">[UserDetails("RemoveOUsNames").ToString]</InArgument>
                  <InArgument x:TypeArguments="sd:DataTable" x:Key="in_UsersData">[UsersData]</InArgument>
                  <InArgument x:TypeArguments="sd:DataTable" x:Key="in_OUsData">[OUsData]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
            </ActivityAction>
          </ui:ForEach.Body>
        </ui:ForEach>
      </Sequence>
    </Switch>
  </Sequence>
</Activity>