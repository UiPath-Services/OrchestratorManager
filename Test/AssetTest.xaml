<Activity mc:Ignorable="sap sap2010" x:Class="AssetManagerTest" this:AssetManagerTest.in_WorkbooksFolderPath="Test/Workbooks/Temp" this:AssetManagerTest.Orchestrator_Version="cloud" this:AssetManagerTest.Cloud_Account_Name="psjapan" this:AssetManagerTest.Tenant_Name="psjapan" this:AssetManagerTest.Test_Workbook_Folder="Test/Workbooks/EN" this:AssetManagerTest.Orchestrator_Type="cloud" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:uta="clr-namespace:UiPath.Testing.Activities;assembly=UiPath.Testing.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_WorkbooksFolderPath" Type="InArgument(x:String)" />
    <x:Property Name="Orchestrator_Version" Type="InArgument(x:String)" />
    <x:Property Name="On_premises_Orchestrator_URL" Type="InArgument(x:String)" />
    <x:Property Name="Cloud_Account_Name" Type="InArgument(x:String)" />
    <x:Property Name="Tenant_Name" Type="InArgument(x:String)" />
    <x:Property Name="Test_Workbook_Folder" Type="InArgument(x:String)" />
    <x:Property Name="Orchestrator_Type" Type="InArgument(x:String)" />
  </x:Members>
  <this:AssetManagerTest.On_premises_Orchestrator_URL>
    <InArgument x:TypeArguments="x:String">
      <Literal x:TypeArguments="x:String" Value="" />
    </InArgument>
  </this:AssetManagerTest.On_premises_Orchestrator_URL>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1582,3046</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>AssetManagerTest_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="62">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Testing.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="48">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Asset Test" sap:VirtualizedContainerService.HintSize="748,2881" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" Name="Config" />
      <Variable x:TypeArguments="x:Int64" Name="FolderID" />
      <Variable x:TypeArguments="ui:WorkbookApplication" Name="OpenWorkbook" />
      <Variable x:TypeArguments="s:String[]" Default="[{&#xA;  &quot;OUFolderName&quot;,&#xA;  &quot;AssetName&quot;,&#xA;  &quot;Description&quot;,&#xA;  &quot;Scope&quot;,&#xA;  &quot;RobotUserName&quot;,&#xA;  &quot;Type&quot;,&#xA;  &quot;Value&quot;,&#xA;  &quot;AssetID&quot;,&#xA;  &quot;Result&quot;&#xA;}]" Name="CreateAssetColumnNames" />
      <Variable x:TypeArguments="sd:DataTable" Name="CreateAssetDT" />
      <Variable x:TypeArguments="sd:DataTable" Name="DeleteAssetDT" />
      <Variable x:TypeArguments="s:String[]" Default="[{&quot;FolderID&quot;, &quot;FolderName&quot;, &quot;AssetID&quot;, &quot;AssetName&quot;, &quot;Result&quot;}]" Name="DeleteAssetColumnNames" />
      <Variable x:TypeArguments="scg:List(ui:WorkbookApplication)" Default="[New List(Of WorkbookApplication)]" Name="OpenWorkbooks" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="706,91" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;Start Asset Tests&quot;]" />
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke Setup workflow" sap:VirtualizedContainerService.HintSize="706,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="Test\Util\Setup.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_Language" />
        <InArgument x:TypeArguments="x:String" x:Key="in_ConfigFilePath">
          <Literal x:TypeArguments="x:String">Config.xlsx</Literal>
        </InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="orchestratorType">
          <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Orchestrator_Type" />
        </InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="orchestratorVersion">
          <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Orchestrator_Version" />
        </InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="username" />
        <InArgument x:TypeArguments="x:String" x:Key="password" />
        <InArgument x:TypeArguments="x:String" x:Key="orchestratorURL">
          <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="On_premises_Orchestrator_URL" />
        </InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="onPremisesTenantName">
          <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Tenant_Name" />
        </InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="userKey" />
        <InArgument x:TypeArguments="x:String" x:Key="clientID" />
        <InArgument x:TypeArguments="x:String" x:Key="cloudTenantName">
          <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Tenant_Name" />
        </InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="workbooksFolderPath">
          <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_WorkbooksFolderPath" />
        </InArgument>
        <InArgument x:TypeArguments="x:Boolean" x:Key="useSavedCredential">
          <Literal x:TypeArguments="x:Boolean" Value="True" />
        </InArgument>
        <InArgument x:TypeArguments="x:Boolean" x:Key="saveCredential" />
        <InArgument x:TypeArguments="x:String" x:Key="accountName">
          <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="Cloud_Account_Name" />
        </InArgument>
        <OutArgument x:TypeArguments="x:Int64" x:Key="out_FolderID">
          <mva:VisualBasicReference x:TypeArguments="x:Int64" ExpressionText="FolderID" />
        </OutArgument>
        <InOutArgument x:TypeArguments="scg:List(ui:WorkbookApplication)" x:Key="OpenWorkbooks">
          <mva:VisualBasicReference x:TypeArguments="scg:List(ui:WorkbookApplication)" ExpressionText="OpenWorkbooks" />
        </InOutArgument>
        <InArgument x:TypeArguments="x:Boolean" x:Key="IsFolderLevel">
          <Literal x:TypeArguments="x:Boolean" Value="True" />
        </InArgument>
        <InOutArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="Config">
          <mva:VisualBasicReference x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" ExpressionText="Config" />
        </InOutArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
    <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="706,2404" sap2010:WorkflowViewState.IdRef="TryCatch_1">
      <TryCatch.Try>
        <Sequence DisplayName="Test" sap:VirtualizedContainerService.HintSize="668,2177" sap2010:WorkflowViewState.IdRef="Sequence_8">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke AssetManager_mock workflow (Create)" sap:VirtualizedContainerService.HintSize="626,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Mocks/Entities/Assets/AssetManager_mock.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="in_AssetOperation">create</InArgument>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[Config]</InArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:ExcelApplicationScope Password="{x:Null}" CreateNewFile="False" DisplayName="Excel Application Scope (Asset)" sap:VirtualizedContainerService.HintSize="626,168" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_1" Workbook="[OpenWorkbook]" WorkbookPath="[String.Format(&quot;{0}\{1}&quot;, in_WorkbooksFolderPath, Config(&quot;AssetConfigFilePath&quot;))]">
            <ui:ExcelApplicationScope.Body>
              <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                </ActivityAction.Argument>
                <ui:ExcelReadRange AddHeaders="True" DataTable="[CreateAssetDT]" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="334,59" sap2010:WorkflowViewState.IdRef="ExcelReadRange_1" SheetName="[Config(&quot;CreateOperationName&quot;)]">
                  <ui:ExcelReadRange.Range>
                    <InArgument x:TypeArguments="x:String">
                      <Literal x:TypeArguments="x:String" Value="" />
                    </InArgument>
                  </ui:ExcelReadRange.Range>
                </ui:ExcelReadRange>
              </ActivityAction>
            </ui:ExcelApplicationScope.Body>
          </ui:ExcelApplicationScope>
          <InvokeMethod DisplayName="Invoke Method" sap:VirtualizedContainerService.HintSize="626,134" sap2010:WorkflowViewState.IdRef="InvokeMethod_1" MethodName="Add">
            <InvokeMethod.TargetObject>
              <InArgument x:TypeArguments="scg:List(ui:WorkbookApplication)">[OpenWorkbooks]</InArgument>
            </InvokeMethod.TargetObject>
            <InArgument x:TypeArguments="ui:WorkbookApplication">[OpenWorkbook]</InArgument>
          </InvokeMethod>
          <If Condition="[Config(&quot;OrchestratorType&quot;).ToLowerInvariant = &quot;onpremises&quot; AndAlso Config(&quot;OnPremisesOrchestratorVersion&quot;) &lt;= 201910]" DisplayName="If Orchestrator Version &lt;= 201910, Remove Assets Per User" sap:VirtualizedContainerService.HintSize="626,208" sap2010:WorkflowViewState.IdRef="If_1">
            <If.Then>
              <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_1">
                <Assign.To>
                  <OutArgument x:TypeArguments="sd:DataTable">[CreateAssetDT]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="sd:DataTable">[CreateAssetDT.AsEnumerable.Where(Function (Row) Row("Robot Name or User's Username").ToString = "").CopyToDataTable]</InArgument>
                </Assign.Value>
              </Assign>
            </If.Then>
          </If>
          <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke AssignColumnNames workflow (CreateAssetDT)" sap:VirtualizedContainerService.HintSize="626,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" UnSafe="False" WorkflowFileName="Common\AssignColumnNames.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="ui:WorkbookApplication" x:Key="in_OpenWorkbook">[OpenWorkbook]</InArgument>
              <InArgument x:TypeArguments="s:String[]" x:Key="in_ColumnNames">[CreateAssetColumnNames]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_SheetName">[Config("CreateOperationName")]</InArgument>
              <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_DataTable">[CreateAssetDT]</OutArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:BuildDataTable DataTable="[DeleteAssetDT]" DisplayName="Build Data Table" sap:VirtualizedContainerService.HintSize="626,59" sap2010:WorkflowViewState.IdRef="BuildDataTable_1" TableInfo="&lt;NewDataSet&gt;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xA;      &lt;xs:complexType&gt;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xA;            &lt;xs:complexType&gt;&#xA;              &lt;xs:sequence&gt;&#xA;                &lt;xs:element name=&quot;FolderID&quot; type=&quot;xs:long&quot; /&gt;&#xA;                &lt;xs:element name=&quot;FolderName&quot; type=&quot;xs:string&quot; /&gt;&#xA;                &lt;xs:element name=&quot;AssetID&quot; type=&quot;xs:long&quot; /&gt;&#xA;                &lt;xs:element name=&quot;AssetName&quot; type=&quot;xs:string&quot; /&gt;&#xA;              &lt;/xs:sequence&gt;&#xA;            &lt;/xs:complexType&gt;&#xA;          &lt;/xs:element&gt;&#xA;        &lt;/xs:choice&gt;&#xA;      &lt;/xs:complexType&gt;&#xA;    &lt;/xs:element&gt;&#xA;  &lt;/xs:schema&gt;&#xA;&lt;/NewDataSet&gt;" />
          <ui:ForEachRow CurrentIndex="{x:Null}" DataTable="[CreateAssetDT]" DisplayName="For Each Row" sap:VirtualizedContainerService.HintSize="626,363" sap2010:WorkflowViewState.IdRef="ForEachRow_1">
            <ui:ForEachRow.Body>
              <ActivityAction x:TypeArguments="sd:DataRow">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="sd:DataRow" Name="row" />
                </ActivityAction.Argument>
                <Sequence sap:VirtualizedContainerService.HintSize="576,215" sap2010:WorkflowViewState.IdRef="Sequence_5">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[{FolderID, row(&quot;OUFolderName&quot;), row(&quot;AssetID&quot;), row(&quot;AssetName&quot;)}]" DataTable="[DeleteAssetDT]" DisplayName="Add Data Row" sap:VirtualizedContainerService.HintSize="534,22" sap2010:WorkflowViewState.IdRef="AddDataRow_1" />
                  <uta:VerifyExpression AlternativeVerificationTitle="{x:Null}" KeepScreenshots="{x:Null}" OutputMessageFormat="{x:Null}" Result="{x:Null}" ScreenshotsPath="{x:Null}" ContinueOnFailure="True" DisplayName="Verify Expression" Expression="[row(&quot;Result&quot;).ToString = Config(&quot;OperationDefaultResult&quot;)]" sap:VirtualizedContainerService.HintSize="534,61" sap2010:WorkflowViewState.IdRef="VerifyExpression_1" TakeScreenshotInCaseOfFailingAssertion="False" TakeScreenshotInCaseOfSucceedingAssertion="False" />
                </Sequence>
              </ActivityAction>
            </ui:ForEachRow.Body>
          </ui:ForEachRow>
          <ui:ExcelApplicationScope Password="{x:Null}" WorkbookPath="{x:Null}" CreateNewFile="False" DisplayName="Excel Application Scope" ExistingWorkbook="[OpenWorkbook]" sap:VirtualizedContainerService.HintSize="626,196" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_2">
            <ui:ExcelApplicationScope.Body>
              <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                </ActivityAction.Argument>
                <ui:ExcelWriteRange AddHeaders="False" DataTable="[DeleteAssetDT]" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="334,87" sap2010:WorkflowViewState.IdRef="ExcelWriteRange_1" SheetName="[Config(&quot;DeleteOperationName&quot;)]" StartingCell="A2" />
              </ActivityAction>
            </ui:ExcelApplicationScope.Body>
          </ui:ExcelApplicationScope>
          <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke AssetManager_mock workflow (Delete)" sap:VirtualizedContainerService.HintSize="626,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="Mocks/Entities/Assets/AssetManager_mock.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="in_AssetOperation">delete</InArgument>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">[Config]</InArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke AssignColumnNames workflow (DeleteAssetDT)" sap:VirtualizedContainerService.HintSize="626,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_6" UnSafe="False" WorkflowFileName="Common\AssignColumnNames.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="ui:WorkbookApplication" x:Key="in_OpenWorkbook">[OpenWorkbook]</InArgument>
              <InArgument x:TypeArguments="s:String[]" x:Key="in_ColumnNames">[DeleteAssetColumnNames]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_SheetName">[Config("DeleteOperationName")]</InArgument>
              <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_DataTable">[DeleteAssetDT]</OutArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:ForEachRow CurrentIndex="{x:Null}" DataTable="[DeleteAssetDT]" DisplayName="For Each Row" sap:VirtualizedContainerService.HintSize="626,209" sap2010:WorkflowViewState.IdRef="ForEachRow_2">
            <ui:ForEachRow.Body>
              <ActivityAction x:TypeArguments="sd:DataRow">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="sd:DataRow" Name="row" />
                </ActivityAction.Argument>
                <uta:VerifyExpression AlternativeVerificationTitle="{x:Null}" KeepScreenshots="{x:Null}" OutputMessageFormat="{x:Null}" Result="{x:Null}" ScreenshotsPath="{x:Null}" ContinueOnFailure="True" DisplayName="Verify Expression" Expression="[row(&quot;Result&quot;).ToString = Config(&quot;OperationDefaultResult&quot;)]" sap:VirtualizedContainerService.HintSize="534,61" sap2010:WorkflowViewState.IdRef="VerifyExpression_2" TakeScreenshotInCaseOfFailingAssertion="False" TakeScreenshotInCaseOfSucceedingAssertion="False" />
              </ActivityAction>
            </ui:ForEachRow.Body>
          </ui:ForEachRow>
        </Sequence>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="672,21" sap2010:WorkflowViewState.IdRef="Catch`1_1">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Catch All Errors" sap:VirtualizedContainerService.HintSize="576,284" sap2010:WorkflowViewState.IdRef="Sequence_9">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="534,91" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Error" Message="[exception.Message]" />
              <uta:VerifyExpression AlternativeVerificationTitle="{x:Null}" KeepScreenshots="{x:Null}" OutputMessageFormat="{x:Null}" Result="{x:Null}" ScreenshotsPath="{x:Null}" ContinueOnFailure="True" DisplayName="Verify Expression" Expression="False" sap:VirtualizedContainerService.HintSize="534,61" sap2010:WorkflowViewState.IdRef="VerifyExpression_3" TakeScreenshotInCaseOfFailingAssertion="False" TakeScreenshotInCaseOfSucceedingAssertion="False" />
            </Sequence>
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke Cleanup workflow" sap:VirtualizedContainerService.HintSize="706,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" UnSafe="False" WorkflowFileName="Test\Util\Cleanup.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="workbooksFolderPath">
          <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_WorkbooksFolderPath" />
        </InArgument>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" x:Key="in_Config">
          <mva:VisualBasicValue x:TypeArguments="scg:Dictionary(x:String, ui:GenericValue)" ExpressionText="Config" />
        </InArgument>
        <InArgument x:TypeArguments="scg:List(ui:WorkbookApplication)" x:Key="OpenWorkbooks">
          <mva:VisualBasicValue x:TypeArguments="scg:List(ui:WorkbookApplication)" ExpressionText="OpenWorkbooks" />
        </InArgument>
        <InArgument x:TypeArguments="x:Boolean" x:Key="IsFolderLevel">
          <Literal x:TypeArguments="x:Boolean" Value="True" />
        </InArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
  </Sequence>
</Activity>